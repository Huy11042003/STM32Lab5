
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800495c  0800495c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800495c  0800495c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800495c  0800495c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000068  080049cc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  080049cc  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d257  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002551  00000000  00000000  0002d32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da8  00000000  00000000  0002f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8f  00000000  00000000  00030628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018637  00000000  00000000  000310b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d58  00000000  00000000  000496ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000889f4  00000000  00000000  0005a446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c08  00000000  00000000  000e2e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000e6a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080048c8 	.word	0x080048c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080048c8 	.word	0x080048c8

0800014c <led_fsm>:
 *      Author: ad
 */
#include "auto.h"
#include <scheduler.h>

void led_fsm(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(autostate){
 8000150:	4b76      	ldr	r3, [pc, #472]	; (800032c <led_fsm+0x1e0>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b04      	cmp	r3, #4
 8000156:	f200 80e7 	bhi.w	8000328 <led_fsm+0x1dc>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <led_fsm+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000175 	.word	0x08000175
 8000164:	08000185 	.word	0x08000185
 8000168:	080001f9 	.word	0x080001f9
 800016c:	08000261 	.word	0x08000261
 8000170:	080002c1 	.word	0x080002c1
		case AUTO_INIT:
			autostate = RED_GREEN;
 8000174:	4b6d      	ldr	r3, [pc, #436]	; (800032c <led_fsm+0x1e0>)
 8000176:	2201      	movs	r2, #1
 8000178:	701a      	strb	r2, [r3, #0]
			setTimer(0, 100);
 800017a:	2164      	movs	r1, #100	; 0x64
 800017c:	2000      	movs	r0, #0
 800017e:	f001 fb7f 	bl	8001880 <setTimer>
			break;
 8000182:	e0d1      	b.n	8000328 <led_fsm+0x1dc>
		case RED_GREEN:
			if (isButtonPressed(0) == 1 ){
 8000184:	2000      	movs	r0, #0
 8000186:	f000 f925 	bl	80003d4 <isButtonPressed>
 800018a:	4603      	mov	r3, r0
 800018c:	2b01      	cmp	r3, #1
 800018e:	d113      	bne.n	80001b8 <led_fsm+0x6c>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000196:	4866      	ldr	r0, [pc, #408]	; (8000330 <led_fsm+0x1e4>)
 8000198:	f002 f896 	bl	80022c8 <HAL_GPIO_WritePin>
										  |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
				MODE = MODE2;
 800019c:	4b65      	ldr	r3, [pc, #404]	; (8000334 <led_fsm+0x1e8>)
 800019e:	2202      	movs	r2, #2
 80001a0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80001a8:	4861      	ldr	r0, [pc, #388]	; (8000330 <led_fsm+0x1e4>)
 80001aa:	f002 f88d 	bl	80022c8 <HAL_GPIO_WritePin>
											  |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_SET);
				setTimer(3, 25);
 80001ae:	2119      	movs	r1, #25
 80001b0:	2003      	movs	r0, #3
 80001b2:	f001 fb65 	bl	8001880 <setTimer>
				break;
 80001b6:	e0b7      	b.n	8000328 <led_fsm+0x1dc>
			}
			displayFirstLedCouple(RED);
 80001b8:	2001      	movs	r0, #1
 80001ba:	f000 f925 	bl	8000408 <displayFirstLedCouple>
			displaySecondLedCouple(GREEN);
 80001be:	2002      	movs	r0, #2
 80001c0:	f000 f97e 	bl	80004c0 <displaySecondLedCouple>
//			if(timer_flag[0] == 1){
				countdownFirstCoupleLed--;
 80001c4:	4b5c      	ldr	r3, [pc, #368]	; (8000338 <led_fsm+0x1ec>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	3b01      	subs	r3, #1
 80001ca:	4a5b      	ldr	r2, [pc, #364]	; (8000338 <led_fsm+0x1ec>)
 80001cc:	6013      	str	r3, [r2, #0]
				countdownSecondCoupleLed--;
 80001ce:	4b5b      	ldr	r3, [pc, #364]	; (800033c <led_fsm+0x1f0>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	3b01      	subs	r3, #1
 80001d4:	4a59      	ldr	r2, [pc, #356]	; (800033c <led_fsm+0x1f0>)
 80001d6:	6013      	str	r3, [r2, #0]
				if(countdownSecondCoupleLed == 0){
 80001d8:	4b58      	ldr	r3, [pc, #352]	; (800033c <led_fsm+0x1f0>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d106      	bne.n	80001ee <led_fsm+0xa2>
					countdownSecondCoupleLed = yellowDelay;
 80001e0:	4b57      	ldr	r3, [pc, #348]	; (8000340 <led_fsm+0x1f4>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a55      	ldr	r2, [pc, #340]	; (800033c <led_fsm+0x1f0>)
 80001e6:	6013      	str	r3, [r2, #0]
					autostate = RED_YELLOW;
 80001e8:	4b50      	ldr	r3, [pc, #320]	; (800032c <led_fsm+0x1e0>)
 80001ea:	2202      	movs	r2, #2
 80001ec:	701a      	strb	r2, [r3, #0]
				}
				setTimer(0, 100);
 80001ee:	2164      	movs	r1, #100	; 0x64
 80001f0:	2000      	movs	r0, #0
 80001f2:	f001 fb45 	bl	8001880 <setTimer>
//			}
			break;
 80001f6:	e097      	b.n	8000328 <led_fsm+0x1dc>
		case RED_YELLOW:
			if (isButtonPressed(0) == 1 ){
 80001f8:	2000      	movs	r0, #0
 80001fa:	f000 f8eb 	bl	80003d4 <isButtonPressed>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b01      	cmp	r3, #1
 8000202:	d109      	bne.n	8000218 <led_fsm+0xcc>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000204:	2201      	movs	r2, #1
 8000206:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800020a:	4849      	ldr	r0, [pc, #292]	; (8000330 <led_fsm+0x1e4>)
 800020c:	f002 f85c 	bl	80022c8 <HAL_GPIO_WritePin>
										  |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
				MODE = MODE2;
 8000210:	4b48      	ldr	r3, [pc, #288]	; (8000334 <led_fsm+0x1e8>)
 8000212:	2202      	movs	r2, #2
 8000214:	701a      	strb	r2, [r3, #0]
				break;
 8000216:	e087      	b.n	8000328 <led_fsm+0x1dc>
			}
			displayFirstLedCouple(RED);
 8000218:	2001      	movs	r0, #1
 800021a:	f000 f8f5 	bl	8000408 <displayFirstLedCouple>
			displaySecondLedCouple(YELLOW);
 800021e:	2003      	movs	r0, #3
 8000220:	f000 f94e 	bl	80004c0 <displaySecondLedCouple>
//			if(timer_flag[0] == 1){
				countdownFirstCoupleLed--;
 8000224:	4b44      	ldr	r3, [pc, #272]	; (8000338 <led_fsm+0x1ec>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	3b01      	subs	r3, #1
 800022a:	4a43      	ldr	r2, [pc, #268]	; (8000338 <led_fsm+0x1ec>)
 800022c:	6013      	str	r3, [r2, #0]
				countdownSecondCoupleLed--;
 800022e:	4b43      	ldr	r3, [pc, #268]	; (800033c <led_fsm+0x1f0>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	3b01      	subs	r3, #1
 8000234:	4a41      	ldr	r2, [pc, #260]	; (800033c <led_fsm+0x1f0>)
 8000236:	6013      	str	r3, [r2, #0]
				if(countdownSecondCoupleLed == 0){
 8000238:	4b40      	ldr	r3, [pc, #256]	; (800033c <led_fsm+0x1f0>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d10a      	bne.n	8000256 <led_fsm+0x10a>
					countdownSecondCoupleLed = redDelay;
 8000240:	4b40      	ldr	r3, [pc, #256]	; (8000344 <led_fsm+0x1f8>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a3d      	ldr	r2, [pc, #244]	; (800033c <led_fsm+0x1f0>)
 8000246:	6013      	str	r3, [r2, #0]
					countdownFirstCoupleLed = greenDelay;
 8000248:	4b3f      	ldr	r3, [pc, #252]	; (8000348 <led_fsm+0x1fc>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a3a      	ldr	r2, [pc, #232]	; (8000338 <led_fsm+0x1ec>)
 800024e:	6013      	str	r3, [r2, #0]
					autostate = GREEN_RED;
 8000250:	4b36      	ldr	r3, [pc, #216]	; (800032c <led_fsm+0x1e0>)
 8000252:	2203      	movs	r2, #3
 8000254:	701a      	strb	r2, [r3, #0]
				}
				setTimer(0, 100);
 8000256:	2164      	movs	r1, #100	; 0x64
 8000258:	2000      	movs	r0, #0
 800025a:	f001 fb11 	bl	8001880 <setTimer>
//			}
			break;
 800025e:	e063      	b.n	8000328 <led_fsm+0x1dc>
		case GREEN_RED:
			if (isButtonPressed(0) == 1 ){
 8000260:	2000      	movs	r0, #0
 8000262:	f000 f8b7 	bl	80003d4 <isButtonPressed>
 8000266:	4603      	mov	r3, r0
 8000268:	2b01      	cmp	r3, #1
 800026a:	d109      	bne.n	8000280 <led_fsm+0x134>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000272:	482f      	ldr	r0, [pc, #188]	; (8000330 <led_fsm+0x1e4>)
 8000274:	f002 f828 	bl	80022c8 <HAL_GPIO_WritePin>
										  |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
				MODE = MODE2;
 8000278:	4b2e      	ldr	r3, [pc, #184]	; (8000334 <led_fsm+0x1e8>)
 800027a:	2202      	movs	r2, #2
 800027c:	701a      	strb	r2, [r3, #0]
				break;
 800027e:	e053      	b.n	8000328 <led_fsm+0x1dc>
			}
			displayFirstLedCouple(GREEN);
 8000280:	2002      	movs	r0, #2
 8000282:	f000 f8c1 	bl	8000408 <displayFirstLedCouple>
			displaySecondLedCouple(RED);
 8000286:	2001      	movs	r0, #1
 8000288:	f000 f91a 	bl	80004c0 <displaySecondLedCouple>
//			if(timer_flag[0] == 1){
				countdownFirstCoupleLed--;
 800028c:	4b2a      	ldr	r3, [pc, #168]	; (8000338 <led_fsm+0x1ec>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	3b01      	subs	r3, #1
 8000292:	4a29      	ldr	r2, [pc, #164]	; (8000338 <led_fsm+0x1ec>)
 8000294:	6013      	str	r3, [r2, #0]
				countdownSecondCoupleLed--;
 8000296:	4b29      	ldr	r3, [pc, #164]	; (800033c <led_fsm+0x1f0>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	3b01      	subs	r3, #1
 800029c:	4a27      	ldr	r2, [pc, #156]	; (800033c <led_fsm+0x1f0>)
 800029e:	6013      	str	r3, [r2, #0]
				if(countdownFirstCoupleLed == 0){
 80002a0:	4b25      	ldr	r3, [pc, #148]	; (8000338 <led_fsm+0x1ec>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d106      	bne.n	80002b6 <led_fsm+0x16a>
					countdownFirstCoupleLed = yellowDelay;
 80002a8:	4b25      	ldr	r3, [pc, #148]	; (8000340 <led_fsm+0x1f4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a22      	ldr	r2, [pc, #136]	; (8000338 <led_fsm+0x1ec>)
 80002ae:	6013      	str	r3, [r2, #0]
					autostate = YELLOW_RED;
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <led_fsm+0x1e0>)
 80002b2:	2204      	movs	r2, #4
 80002b4:	701a      	strb	r2, [r3, #0]
				}
				setTimer(0, 100);
 80002b6:	2164      	movs	r1, #100	; 0x64
 80002b8:	2000      	movs	r0, #0
 80002ba:	f001 fae1 	bl	8001880 <setTimer>
//			}
			break;
 80002be:	e033      	b.n	8000328 <led_fsm+0x1dc>
		case YELLOW_RED:
			if (isButtonPressed(0) == 1 ){
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 f887 	bl	80003d4 <isButtonPressed>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d109      	bne.n	80002e0 <led_fsm+0x194>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80002cc:	2201      	movs	r2, #1
 80002ce:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80002d2:	4817      	ldr	r0, [pc, #92]	; (8000330 <led_fsm+0x1e4>)
 80002d4:	f001 fff8 	bl	80022c8 <HAL_GPIO_WritePin>
										  |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
				MODE = MODE2;
 80002d8:	4b16      	ldr	r3, [pc, #88]	; (8000334 <led_fsm+0x1e8>)
 80002da:	2202      	movs	r2, #2
 80002dc:	701a      	strb	r2, [r3, #0]
				break;
 80002de:	e023      	b.n	8000328 <led_fsm+0x1dc>
			}
			displayFirstLedCouple(RED);
 80002e0:	2001      	movs	r0, #1
 80002e2:	f000 f891 	bl	8000408 <displayFirstLedCouple>
			displaySecondLedCouple(GREEN);
 80002e6:	2002      	movs	r0, #2
 80002e8:	f000 f8ea 	bl	80004c0 <displaySecondLedCouple>
//			if(timer_flag[0] == 1){
				countdownFirstCoupleLed--;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <led_fsm+0x1ec>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	3b01      	subs	r3, #1
 80002f2:	4a11      	ldr	r2, [pc, #68]	; (8000338 <led_fsm+0x1ec>)
 80002f4:	6013      	str	r3, [r2, #0]
				countdownSecondCoupleLed--;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <led_fsm+0x1f0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	4a0f      	ldr	r2, [pc, #60]	; (800033c <led_fsm+0x1f0>)
 80002fe:	6013      	str	r3, [r2, #0]
				if(countdownFirstCoupleLed == 0){
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <led_fsm+0x1ec>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d10a      	bne.n	800031e <led_fsm+0x1d2>
					countdownSecondCoupleLed = greenDelay;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <led_fsm+0x1fc>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a0b      	ldr	r2, [pc, #44]	; (800033c <led_fsm+0x1f0>)
 800030e:	6013      	str	r3, [r2, #0]
					countdownFirstCoupleLed = redDelay;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <led_fsm+0x1f8>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a08      	ldr	r2, [pc, #32]	; (8000338 <led_fsm+0x1ec>)
 8000316:	6013      	str	r3, [r2, #0]
					autostate = RED_GREEN;
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <led_fsm+0x1e0>)
 800031a:	2201      	movs	r2, #1
 800031c:	701a      	strb	r2, [r3, #0]
				}
				setTimer(0, 100);
 800031e:	2164      	movs	r1, #100	; 0x64
 8000320:	2000      	movs	r0, #0
 8000322:	f001 faad 	bl	8001880 <setTimer>
//			}
			break;
 8000326:	bf00      	nop
	}
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000091 	.word	0x20000091
 8000330:	40010800 	.word	0x40010800
 8000334:	20000090 	.word	0x20000090
 8000338:	20000098 	.word	0x20000098
 800033c:	2000009c 	.word	0x2000009c
 8000340:	20000008 	.word	0x20000008
 8000344:	20000000 	.word	0x20000000
 8000348:	20000004 	.word	0x20000004

0800034c <seg_fsm>:
void seg_fsm(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	switch(seg7AutoState){
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <seg_fsm+0x70>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b02      	cmp	r3, #2
 8000356:	d01e      	beq.n	8000396 <seg_fsm+0x4a>
 8000358:	2b02      	cmp	r3, #2
 800035a:	dc2c      	bgt.n	80003b6 <seg_fsm+0x6a>
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <seg_fsm+0x1a>
 8000360:	2b01      	cmp	r3, #1
 8000362:	d008      	beq.n	8000376 <seg_fsm+0x2a>
				seg7AutoState = FIRST;
				setTimer(2, 50);
//			}
			break;
		default:
			break;
 8000364:	e027      	b.n	80003b6 <seg_fsm+0x6a>
			seg7AutoState = FIRST;
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <seg_fsm+0x70>)
 8000368:	2201      	movs	r2, #1
 800036a:	701a      	strb	r2, [r3, #0]
			setTimer(2, 1);
 800036c:	2101      	movs	r1, #1
 800036e:	2002      	movs	r0, #2
 8000370:	f001 fa86 	bl	8001880 <setTimer>
			break;
 8000374:	e020      	b.n	80003b8 <seg_fsm+0x6c>
				showTimeDelay_First(countdownFirstCoupleLed, countdownSecondCoupleLed);
 8000376:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <seg_fsm+0x74>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a12      	ldr	r2, [pc, #72]	; (80003c4 <seg_fsm+0x78>)
 800037c:	6812      	ldr	r2, [r2, #0]
 800037e:	4611      	mov	r1, r2
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fcfb 	bl	8000d7c <showTimeDelay_First>
				seg7AutoState = SECOND;
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <seg_fsm+0x70>)
 8000388:	2202      	movs	r2, #2
 800038a:	701a      	strb	r2, [r3, #0]
				setTimer(2, 50);
 800038c:	2132      	movs	r1, #50	; 0x32
 800038e:	2002      	movs	r0, #2
 8000390:	f001 fa76 	bl	8001880 <setTimer>
			break;
 8000394:	e010      	b.n	80003b8 <seg_fsm+0x6c>
				showTimeDelay_Second(countdownFirstCoupleLed, countdownSecondCoupleLed);
 8000396:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <seg_fsm+0x74>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <seg_fsm+0x78>)
 800039c:	6812      	ldr	r2, [r2, #0]
 800039e:	4611      	mov	r1, r2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fd15 	bl	8000dd0 <showTimeDelay_Second>
				seg7AutoState = FIRST;
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <seg_fsm+0x70>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	701a      	strb	r2, [r3, #0]
				setTimer(2, 50);
 80003ac:	2132      	movs	r1, #50	; 0x32
 80003ae:	2002      	movs	r0, #2
 80003b0:	f001 fa66 	bl	8001880 <setTimer>
			break;
 80003b4:	e000      	b.n	80003b8 <seg_fsm+0x6c>
			break;
 80003b6:	bf00      	nop
	}
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000095 	.word	0x20000095
 80003c0:	20000098 	.word	0x20000098
 80003c4:	2000009c 	.word	0x2000009c

080003c8 <auto_run>:
void auto_run(){
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	if(MODE == MODE1){
//		led_fsm();
	}
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr

080003d4 <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[BUTTONS_NUMBER] = {0,0,0};


int isButtonPressed(int i){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1){
 80003dc:	4a09      	ldr	r2, [pc, #36]	; (8000404 <isButtonPressed+0x30>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d106      	bne.n	80003f6 <isButtonPressed+0x22>
		button_flag[i] = 0;
 80003e8:	4a06      	ldr	r2, [pc, #24]	; (8000404 <isButtonPressed+0x30>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2100      	movs	r1, #0
 80003ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003f2:	2301      	movs	r3, #1
 80003f4:	e000      	b.n	80003f8 <isButtonPressed+0x24>
	}
	return 0;
 80003f6:	2300      	movs	r3, #0

}
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	20000084 	.word	0x20000084

08000408 <displayFirstLedCouple>:
 *      Author: ad
 */
#include "display.h"


void displayFirstLedCouple(enum LedState state_1){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
	switch(state_1){
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	2b03      	cmp	r3, #3
 8000416:	d84b      	bhi.n	80004b0 <displayFirstLedCouple+0xa8>
 8000418:	a201      	add	r2, pc, #4	; (adr r2, 8000420 <displayFirstLedCouple+0x18>)
 800041a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041e:	bf00      	nop
 8000420:	08000431 	.word	0x08000431
 8000424:	08000451 	.word	0x08000451
 8000428:	08000491 	.word	0x08000491
 800042c:	08000471 	.word	0x08000471
	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 1) ;
 8000430:	2201      	movs	r2, #1
 8000432:	2140      	movs	r1, #64	; 0x40
 8000434:	4821      	ldr	r0, [pc, #132]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000436:	f001 ff47 	bl	80022c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 1 ) ;
 800043a:	2201      	movs	r2, #1
 800043c:	2120      	movs	r1, #32
 800043e:	481f      	ldr	r0, [pc, #124]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000440:	f001 ff42 	bl	80022c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 1 ) ;
 8000444:	2201      	movs	r2, #1
 8000446:	2110      	movs	r1, #16
 8000448:	481c      	ldr	r0, [pc, #112]	; (80004bc <displayFirstLedCouple+0xb4>)
 800044a:	f001 ff3d 	bl	80022c8 <HAL_GPIO_WritePin>
			 break;
 800044e:	e030      	b.n	80004b2 <displayFirstLedCouple+0xaa>
	 case RED:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 1) ;
 8000450:	2201      	movs	r2, #1
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4819      	ldr	r0, [pc, #100]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000456:	f001 ff37 	bl	80022c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 1 ) ;
 800045a:	2201      	movs	r2, #1
 800045c:	2120      	movs	r1, #32
 800045e:	4817      	ldr	r0, [pc, #92]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000460:	f001 ff32 	bl	80022c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0 ) ;
 8000464:	2200      	movs	r2, #0
 8000466:	2110      	movs	r1, #16
 8000468:	4814      	ldr	r0, [pc, #80]	; (80004bc <displayFirstLedCouple+0xb4>)
 800046a:	f001 ff2d 	bl	80022c8 <HAL_GPIO_WritePin>
			 break;
 800046e:	e020      	b.n	80004b2 <displayFirstLedCouple+0xaa>
	 case YELLOW:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 1) ;
 8000470:	2201      	movs	r2, #1
 8000472:	2140      	movs	r1, #64	; 0x40
 8000474:	4811      	ldr	r0, [pc, #68]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000476:	f001 ff27 	bl	80022c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0 ) ;
 800047a:	2200      	movs	r2, #0
 800047c:	2120      	movs	r1, #32
 800047e:	480f      	ldr	r0, [pc, #60]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000480:	f001 ff22 	bl	80022c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 1 ) ;
 8000484:	2201      	movs	r2, #1
 8000486:	2110      	movs	r1, #16
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <displayFirstLedCouple+0xb4>)
 800048a:	f001 ff1d 	bl	80022c8 <HAL_GPIO_WritePin>
			 break;
 800048e:	e010      	b.n	80004b2 <displayFirstLedCouple+0xaa>
	 case GREEN:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 8000490:	2200      	movs	r2, #0
 8000492:	2140      	movs	r1, #64	; 0x40
 8000494:	4809      	ldr	r0, [pc, #36]	; (80004bc <displayFirstLedCouple+0xb4>)
 8000496:	f001 ff17 	bl	80022c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 1 ) ;
 800049a:	2201      	movs	r2, #1
 800049c:	2120      	movs	r1, #32
 800049e:	4807      	ldr	r0, [pc, #28]	; (80004bc <displayFirstLedCouple+0xb4>)
 80004a0:	f001 ff12 	bl	80022c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 1 ) ;
 80004a4:	2201      	movs	r2, #1
 80004a6:	2110      	movs	r1, #16
 80004a8:	4804      	ldr	r0, [pc, #16]	; (80004bc <displayFirstLedCouple+0xb4>)
 80004aa:	f001 ff0d 	bl	80022c8 <HAL_GPIO_WritePin>
			 break;
 80004ae:	e000      	b.n	80004b2 <displayFirstLedCouple+0xaa>
	 default:
		 break;
 80004b0:	bf00      	nop
	}
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40010800 	.word	0x40010800

080004c0 <displaySecondLedCouple>:



void displaySecondLedCouple(enum LedState state_2){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	switch(state_2){
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b03      	cmp	r3, #3
 80004ce:	d853      	bhi.n	8000578 <displaySecondLedCouple+0xb8>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <displaySecondLedCouple+0x18>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	080004e9 	.word	0x080004e9
 80004dc:	0800050d 	.word	0x0800050d
 80004e0:	08000555 	.word	0x08000555
 80004e4:	08000531 	.word	0x08000531
	 	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 1) ;
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ee:	4825      	ldr	r0, [pc, #148]	; (8000584 <displaySecondLedCouple+0xc4>)
 80004f0:	f001 feea 	bl	80022c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 1 ) ;
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fa:	4822      	ldr	r0, [pc, #136]	; (8000584 <displaySecondLedCouple+0xc4>)
 80004fc:	f001 fee4 	bl	80022c8 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 1 ) ;
 8000500:	2201      	movs	r2, #1
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	481f      	ldr	r0, [pc, #124]	; (8000584 <displaySecondLedCouple+0xc4>)
 8000506:	f001 fedf 	bl	80022c8 <HAL_GPIO_WritePin>
			 break;
 800050a:	e036      	b.n	800057a <displaySecondLedCouple+0xba>
		case RED:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 1) ;
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	481c      	ldr	r0, [pc, #112]	; (8000584 <displaySecondLedCouple+0xc4>)
 8000514:	f001 fed8 	bl	80022c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 1 ) ;
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051e:	4819      	ldr	r0, [pc, #100]	; (8000584 <displaySecondLedCouple+0xc4>)
 8000520:	f001 fed2 	bl	80022c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0 ) ;
 8000524:	2200      	movs	r2, #0
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	4816      	ldr	r0, [pc, #88]	; (8000584 <displaySecondLedCouple+0xc4>)
 800052a:	f001 fecd 	bl	80022c8 <HAL_GPIO_WritePin>
			break;
 800052e:	e024      	b.n	800057a <displaySecondLedCouple+0xba>
		case YELLOW:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 1) ;
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000536:	4813      	ldr	r0, [pc, #76]	; (8000584 <displaySecondLedCouple+0xc4>)
 8000538:	f001 fec6 	bl	80022c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0 ) ;
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000542:	4810      	ldr	r0, [pc, #64]	; (8000584 <displaySecondLedCouple+0xc4>)
 8000544:	f001 fec0 	bl	80022c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 1 ) ;
 8000548:	2201      	movs	r2, #1
 800054a:	2180      	movs	r1, #128	; 0x80
 800054c:	480d      	ldr	r0, [pc, #52]	; (8000584 <displaySecondLedCouple+0xc4>)
 800054e:	f001 febb 	bl	80022c8 <HAL_GPIO_WritePin>
			break;
 8000552:	e012      	b.n	800057a <displaySecondLedCouple+0xba>
		case GREEN:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055a:	480a      	ldr	r0, [pc, #40]	; (8000584 <displaySecondLedCouple+0xc4>)
 800055c:	f001 feb4 	bl	80022c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 1 ) ;
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000566:	4807      	ldr	r0, [pc, #28]	; (8000584 <displaySecondLedCouple+0xc4>)
 8000568:	f001 feae 	bl	80022c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 1 ) ;
 800056c:	2201      	movs	r2, #1
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	4804      	ldr	r0, [pc, #16]	; (8000584 <displaySecondLedCouple+0xc4>)
 8000572:	f001 fea9 	bl	80022c8 <HAL_GPIO_WritePin>
			break;
 8000576:	e000      	b.n	800057a <displaySecondLedCouple+0xba>
		default:
		  break;
 8000578:	bf00      	nop
   }
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40010800 	.word	0x40010800

08000588 <toggleLeds>:

void toggleLeds(enum LedState state){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	switch(state){
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b03      	cmp	r3, #3
 8000596:	d00f      	beq.n	80005b8 <toggleLeds+0x30>
 8000598:	2b03      	cmp	r3, #3
 800059a:	dc20      	bgt.n	80005de <toggleLeds+0x56>
 800059c:	2b01      	cmp	r3, #1
 800059e:	d015      	beq.n	80005cc <toggleLeds+0x44>
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d11c      	bne.n	80005de <toggleLeds+0x56>
	 case GREEN:
			 HAL_GPIO_TogglePin( GREEN1_GPIO_Port , GREEN1_Pin) ;
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	4810      	ldr	r0, [pc, #64]	; (80005e8 <toggleLeds+0x60>)
 80005a8:	f001 fea6 	bl	80022f8 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( GREEN2_GPIO_Port , GREEN2_Pin) ;
 80005ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <toggleLeds+0x60>)
 80005b2:	f001 fea1 	bl	80022f8 <HAL_GPIO_TogglePin>
			 break;
 80005b6:	e013      	b.n	80005e0 <toggleLeds+0x58>
	 case YELLOW:
			 HAL_GPIO_TogglePin( YELLOW1_GPIO_Port , YELLOW1_Pin) ;
 80005b8:	2120      	movs	r1, #32
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <toggleLeds+0x60>)
 80005bc:	f001 fe9c 	bl	80022f8 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( YELLOW2_GPIO_Port , YELLOW2_Pin) ;
 80005c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <toggleLeds+0x60>)
 80005c6:	f001 fe97 	bl	80022f8 <HAL_GPIO_TogglePin>
			 break;
 80005ca:	e009      	b.n	80005e0 <toggleLeds+0x58>
	 case RED:
			 HAL_GPIO_TogglePin( RED1_GPIO_Port , RED1_Pin) ;
 80005cc:	2110      	movs	r1, #16
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <toggleLeds+0x60>)
 80005d0:	f001 fe92 	bl	80022f8 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( RED2_GPIO_Port , RED2_Pin) ;
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <toggleLeds+0x60>)
 80005d8:	f001 fe8e 	bl	80022f8 <HAL_GPIO_TogglePin>
			 break;
 80005dc:	e000      	b.n	80005e0 <toggleLeds+0x58>
	 default:
		 break;
 80005de:	bf00      	nop
	}
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40010800 	.word	0x40010800

080005ec <displaySEG7_1>:


void displaySEG7_1(int num){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
switch(num){
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b09      	cmp	r3, #9
 80005f8:	f200 8180 	bhi.w	80008fc <displaySEG7_1+0x310>
 80005fc:	a201      	add	r2, pc, #4	; (adr r2, 8000604 <displaySEG7_1+0x18>)
 80005fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000602:	bf00      	nop
 8000604:	0800062d 	.word	0x0800062d
 8000608:	08000675 	.word	0x08000675
 800060c:	080006bd 	.word	0x080006bd
 8000610:	08000705 	.word	0x08000705
 8000614:	0800074d 	.word	0x0800074d
 8000618:	08000795 	.word	0x08000795
 800061c:	080007dd 	.word	0x080007dd
 8000620:	08000825 	.word	0x08000825
 8000624:	0800086d 	.word	0x0800086d
 8000628:	080008b5 	.word	0x080008b5
	case 0:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	48b5      	ldr	r0, [pc, #724]	; (8000908 <displaySEG7_1+0x31c>)
 8000632:	f001 fe49 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000636:	2200      	movs	r2, #0
 8000638:	2102      	movs	r1, #2
 800063a:	48b3      	ldr	r0, [pc, #716]	; (8000908 <displaySEG7_1+0x31c>)
 800063c:	f001 fe44 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000640:	2200      	movs	r2, #0
 8000642:	2104      	movs	r1, #4
 8000644:	48b0      	ldr	r0, [pc, #704]	; (8000908 <displaySEG7_1+0x31c>)
 8000646:	f001 fe3f 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 800064a:	2200      	movs	r2, #0
 800064c:	2108      	movs	r1, #8
 800064e:	48ae      	ldr	r0, [pc, #696]	; (8000908 <displaySEG7_1+0x31c>)
 8000650:	f001 fe3a 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000654:	2200      	movs	r2, #0
 8000656:	2110      	movs	r1, #16
 8000658:	48ab      	ldr	r0, [pc, #684]	; (8000908 <displaySEG7_1+0x31c>)
 800065a:	f001 fe35 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	48a9      	ldr	r0, [pc, #676]	; (8000908 <displaySEG7_1+0x31c>)
 8000664:	f001 fe30 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 8000668:	2201      	movs	r2, #1
 800066a:	2140      	movs	r1, #64	; 0x40
 800066c:	48a6      	ldr	r0, [pc, #664]	; (8000908 <displaySEG7_1+0x31c>)
 800066e:	f001 fe2b 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 8000672:	e144      	b.n	80008fe <displaySEG7_1+0x312>

	case 1:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 ) ;
 8000674:	2201      	movs	r2, #1
 8000676:	2101      	movs	r1, #1
 8000678:	48a3      	ldr	r0, [pc, #652]	; (8000908 <displaySEG7_1+0x31c>)
 800067a:	f001 fe25 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800067e:	2200      	movs	r2, #0
 8000680:	2102      	movs	r1, #2
 8000682:	48a1      	ldr	r0, [pc, #644]	; (8000908 <displaySEG7_1+0x31c>)
 8000684:	f001 fe20 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000688:	2200      	movs	r2, #0
 800068a:	2104      	movs	r1, #4
 800068c:	489e      	ldr	r0, [pc, #632]	; (8000908 <displaySEG7_1+0x31c>)
 800068e:	f001 fe1b 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 8000692:	2201      	movs	r2, #1
 8000694:	2108      	movs	r1, #8
 8000696:	489c      	ldr	r0, [pc, #624]	; (8000908 <displaySEG7_1+0x31c>)
 8000698:	f001 fe16 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 800069c:	2201      	movs	r2, #1
 800069e:	2110      	movs	r1, #16
 80006a0:	4899      	ldr	r0, [pc, #612]	; (8000908 <displaySEG7_1+0x31c>)
 80006a2:	f001 fe11 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 80006a6:	2201      	movs	r2, #1
 80006a8:	2120      	movs	r1, #32
 80006aa:	4897      	ldr	r0, [pc, #604]	; (8000908 <displaySEG7_1+0x31c>)
 80006ac:	f001 fe0c 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 80006b0:	2201      	movs	r2, #1
 80006b2:	2140      	movs	r1, #64	; 0x40
 80006b4:	4894      	ldr	r0, [pc, #592]	; (8000908 <displaySEG7_1+0x31c>)
 80006b6:	f001 fe07 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 80006ba:	e120      	b.n	80008fe <displaySEG7_1+0x312>

	case 2:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80006bc:	2200      	movs	r2, #0
 80006be:	2101      	movs	r1, #1
 80006c0:	4891      	ldr	r0, [pc, #580]	; (8000908 <displaySEG7_1+0x31c>)
 80006c2:	f001 fe01 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80006c6:	2200      	movs	r2, #0
 80006c8:	2102      	movs	r1, #2
 80006ca:	488f      	ldr	r0, [pc, #572]	; (8000908 <displaySEG7_1+0x31c>)
 80006cc:	f001 fdfc 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 1 ) ;
 80006d0:	2201      	movs	r2, #1
 80006d2:	2104      	movs	r1, #4
 80006d4:	488c      	ldr	r0, [pc, #560]	; (8000908 <displaySEG7_1+0x31c>)
 80006d6:	f001 fdf7 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80006da:	2200      	movs	r2, #0
 80006dc:	2108      	movs	r1, #8
 80006de:	488a      	ldr	r0, [pc, #552]	; (8000908 <displaySEG7_1+0x31c>)
 80006e0:	f001 fdf2 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 80006e4:	2200      	movs	r2, #0
 80006e6:	2110      	movs	r1, #16
 80006e8:	4887      	ldr	r0, [pc, #540]	; (8000908 <displaySEG7_1+0x31c>)
 80006ea:	f001 fded 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 80006ee:	2201      	movs	r2, #1
 80006f0:	2120      	movs	r1, #32
 80006f2:	4885      	ldr	r0, [pc, #532]	; (8000908 <displaySEG7_1+0x31c>)
 80006f4:	f001 fde8 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80006f8:	2200      	movs	r2, #0
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	4882      	ldr	r0, [pc, #520]	; (8000908 <displaySEG7_1+0x31c>)
 80006fe:	f001 fde3 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 8000702:	e0fc      	b.n	80008fe <displaySEG7_1+0x312>

	case 3:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000704:	2200      	movs	r2, #0
 8000706:	2101      	movs	r1, #1
 8000708:	487f      	ldr	r0, [pc, #508]	; (8000908 <displaySEG7_1+0x31c>)
 800070a:	f001 fddd 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800070e:	2200      	movs	r2, #0
 8000710:	2102      	movs	r1, #2
 8000712:	487d      	ldr	r0, [pc, #500]	; (8000908 <displaySEG7_1+0x31c>)
 8000714:	f001 fdd8 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000718:	2200      	movs	r2, #0
 800071a:	2104      	movs	r1, #4
 800071c:	487a      	ldr	r0, [pc, #488]	; (8000908 <displaySEG7_1+0x31c>)
 800071e:	f001 fdd3 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000722:	2200      	movs	r2, #0
 8000724:	2108      	movs	r1, #8
 8000726:	4878      	ldr	r0, [pc, #480]	; (8000908 <displaySEG7_1+0x31c>)
 8000728:	f001 fdce 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 800072c:	2201      	movs	r2, #1
 800072e:	2110      	movs	r1, #16
 8000730:	4875      	ldr	r0, [pc, #468]	; (8000908 <displaySEG7_1+0x31c>)
 8000732:	f001 fdc9 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 8000736:	2201      	movs	r2, #1
 8000738:	2120      	movs	r1, #32
 800073a:	4873      	ldr	r0, [pc, #460]	; (8000908 <displaySEG7_1+0x31c>)
 800073c:	f001 fdc4 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000740:	2200      	movs	r2, #0
 8000742:	2140      	movs	r1, #64	; 0x40
 8000744:	4870      	ldr	r0, [pc, #448]	; (8000908 <displaySEG7_1+0x31c>)
 8000746:	f001 fdbf 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 800074a:	e0d8      	b.n	80008fe <displaySEG7_1+0x312>

	case 4:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 ) ;
 800074c:	2201      	movs	r2, #1
 800074e:	2101      	movs	r1, #1
 8000750:	486d      	ldr	r0, [pc, #436]	; (8000908 <displaySEG7_1+0x31c>)
 8000752:	f001 fdb9 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	486b      	ldr	r0, [pc, #428]	; (8000908 <displaySEG7_1+0x31c>)
 800075c:	f001 fdb4 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000760:	2200      	movs	r2, #0
 8000762:	2104      	movs	r1, #4
 8000764:	4868      	ldr	r0, [pc, #416]	; (8000908 <displaySEG7_1+0x31c>)
 8000766:	f001 fdaf 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 800076a:	2201      	movs	r2, #1
 800076c:	2108      	movs	r1, #8
 800076e:	4866      	ldr	r0, [pc, #408]	; (8000908 <displaySEG7_1+0x31c>)
 8000770:	f001 fdaa 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000774:	2201      	movs	r2, #1
 8000776:	2110      	movs	r1, #16
 8000778:	4863      	ldr	r0, [pc, #396]	; (8000908 <displaySEG7_1+0x31c>)
 800077a:	f001 fda5 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	4861      	ldr	r0, [pc, #388]	; (8000908 <displaySEG7_1+0x31c>)
 8000784:	f001 fda0 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000788:	2200      	movs	r2, #0
 800078a:	2140      	movs	r1, #64	; 0x40
 800078c:	485e      	ldr	r0, [pc, #376]	; (8000908 <displaySEG7_1+0x31c>)
 800078e:	f001 fd9b 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 8000792:	e0b4      	b.n	80008fe <displaySEG7_1+0x312>

	case 5:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000794:	2200      	movs	r2, #0
 8000796:	2101      	movs	r1, #1
 8000798:	485b      	ldr	r0, [pc, #364]	; (8000908 <displaySEG7_1+0x31c>)
 800079a:	f001 fd95 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 ) ;
 800079e:	2201      	movs	r2, #1
 80007a0:	2102      	movs	r1, #2
 80007a2:	4859      	ldr	r0, [pc, #356]	; (8000908 <displaySEG7_1+0x31c>)
 80007a4:	f001 fd90 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80007a8:	2200      	movs	r2, #0
 80007aa:	2104      	movs	r1, #4
 80007ac:	4856      	ldr	r0, [pc, #344]	; (8000908 <displaySEG7_1+0x31c>)
 80007ae:	f001 fd8b 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80007b2:	2200      	movs	r2, #0
 80007b4:	2108      	movs	r1, #8
 80007b6:	4854      	ldr	r0, [pc, #336]	; (8000908 <displaySEG7_1+0x31c>)
 80007b8:	f001 fd86 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 80007bc:	2201      	movs	r2, #1
 80007be:	2110      	movs	r1, #16
 80007c0:	4851      	ldr	r0, [pc, #324]	; (8000908 <displaySEG7_1+0x31c>)
 80007c2:	f001 fd81 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 80007c6:	2200      	movs	r2, #0
 80007c8:	2120      	movs	r1, #32
 80007ca:	484f      	ldr	r0, [pc, #316]	; (8000908 <displaySEG7_1+0x31c>)
 80007cc:	f001 fd7c 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80007d0:	2200      	movs	r2, #0
 80007d2:	2140      	movs	r1, #64	; 0x40
 80007d4:	484c      	ldr	r0, [pc, #304]	; (8000908 <displaySEG7_1+0x31c>)
 80007d6:	f001 fd77 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 80007da:	e090      	b.n	80008fe <displaySEG7_1+0x312>

	case 6:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80007dc:	2200      	movs	r2, #0
 80007de:	2101      	movs	r1, #1
 80007e0:	4849      	ldr	r0, [pc, #292]	; (8000908 <displaySEG7_1+0x31c>)
 80007e2:	f001 fd71 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 ) ;
 80007e6:	2201      	movs	r2, #1
 80007e8:	2102      	movs	r1, #2
 80007ea:	4847      	ldr	r0, [pc, #284]	; (8000908 <displaySEG7_1+0x31c>)
 80007ec:	f001 fd6c 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80007f0:	2200      	movs	r2, #0
 80007f2:	2104      	movs	r1, #4
 80007f4:	4844      	ldr	r0, [pc, #272]	; (8000908 <displaySEG7_1+0x31c>)
 80007f6:	f001 fd67 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80007fa:	2200      	movs	r2, #0
 80007fc:	2108      	movs	r1, #8
 80007fe:	4842      	ldr	r0, [pc, #264]	; (8000908 <displaySEG7_1+0x31c>)
 8000800:	f001 fd62 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	483f      	ldr	r0, [pc, #252]	; (8000908 <displaySEG7_1+0x31c>)
 800080a:	f001 fd5d 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800080e:	2200      	movs	r2, #0
 8000810:	2120      	movs	r1, #32
 8000812:	483d      	ldr	r0, [pc, #244]	; (8000908 <displaySEG7_1+0x31c>)
 8000814:	f001 fd58 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000818:	2200      	movs	r2, #0
 800081a:	2140      	movs	r1, #64	; 0x40
 800081c:	483a      	ldr	r0, [pc, #232]	; (8000908 <displaySEG7_1+0x31c>)
 800081e:	f001 fd53 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 8000822:	e06c      	b.n	80008fe <displaySEG7_1+0x312>

	case 7:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000824:	2200      	movs	r2, #0
 8000826:	2101      	movs	r1, #1
 8000828:	4837      	ldr	r0, [pc, #220]	; (8000908 <displaySEG7_1+0x31c>)
 800082a:	f001 fd4d 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800082e:	2200      	movs	r2, #0
 8000830:	2102      	movs	r1, #2
 8000832:	4835      	ldr	r0, [pc, #212]	; (8000908 <displaySEG7_1+0x31c>)
 8000834:	f001 fd48 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000838:	2200      	movs	r2, #0
 800083a:	2104      	movs	r1, #4
 800083c:	4832      	ldr	r0, [pc, #200]	; (8000908 <displaySEG7_1+0x31c>)
 800083e:	f001 fd43 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 8000842:	2201      	movs	r2, #1
 8000844:	2108      	movs	r1, #8
 8000846:	4830      	ldr	r0, [pc, #192]	; (8000908 <displaySEG7_1+0x31c>)
 8000848:	f001 fd3e 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 800084c:	2201      	movs	r2, #1
 800084e:	2110      	movs	r1, #16
 8000850:	482d      	ldr	r0, [pc, #180]	; (8000908 <displaySEG7_1+0x31c>)
 8000852:	f001 fd39 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 8000856:	2201      	movs	r2, #1
 8000858:	2120      	movs	r1, #32
 800085a:	482b      	ldr	r0, [pc, #172]	; (8000908 <displaySEG7_1+0x31c>)
 800085c:	f001 fd34 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 8000860:	2201      	movs	r2, #1
 8000862:	2140      	movs	r1, #64	; 0x40
 8000864:	4828      	ldr	r0, [pc, #160]	; (8000908 <displaySEG7_1+0x31c>)
 8000866:	f001 fd2f 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 800086a:	e048      	b.n	80008fe <displaySEG7_1+0x312>

	case 8:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 800086c:	2200      	movs	r2, #0
 800086e:	2101      	movs	r1, #1
 8000870:	4825      	ldr	r0, [pc, #148]	; (8000908 <displaySEG7_1+0x31c>)
 8000872:	f001 fd29 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000876:	2200      	movs	r2, #0
 8000878:	2102      	movs	r1, #2
 800087a:	4823      	ldr	r0, [pc, #140]	; (8000908 <displaySEG7_1+0x31c>)
 800087c:	f001 fd24 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000880:	2200      	movs	r2, #0
 8000882:	2104      	movs	r1, #4
 8000884:	4820      	ldr	r0, [pc, #128]	; (8000908 <displaySEG7_1+0x31c>)
 8000886:	f001 fd1f 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 800088a:	2200      	movs	r2, #0
 800088c:	2108      	movs	r1, #8
 800088e:	481e      	ldr	r0, [pc, #120]	; (8000908 <displaySEG7_1+0x31c>)
 8000890:	f001 fd1a 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000894:	2200      	movs	r2, #0
 8000896:	2110      	movs	r1, #16
 8000898:	481b      	ldr	r0, [pc, #108]	; (8000908 <displaySEG7_1+0x31c>)
 800089a:	f001 fd15 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800089e:	2200      	movs	r2, #0
 80008a0:	2120      	movs	r1, #32
 80008a2:	4819      	ldr	r0, [pc, #100]	; (8000908 <displaySEG7_1+0x31c>)
 80008a4:	f001 fd10 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80008a8:	2200      	movs	r2, #0
 80008aa:	2140      	movs	r1, #64	; 0x40
 80008ac:	4816      	ldr	r0, [pc, #88]	; (8000908 <displaySEG7_1+0x31c>)
 80008ae:	f001 fd0b 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 80008b2:	e024      	b.n	80008fe <displaySEG7_1+0x312>

	case 9:
		HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80008b4:	2200      	movs	r2, #0
 80008b6:	2101      	movs	r1, #1
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <displaySEG7_1+0x31c>)
 80008ba:	f001 fd05 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80008be:	2200      	movs	r2, #0
 80008c0:	2102      	movs	r1, #2
 80008c2:	4811      	ldr	r0, [pc, #68]	; (8000908 <displaySEG7_1+0x31c>)
 80008c4:	f001 fd00 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80008c8:	2200      	movs	r2, #0
 80008ca:	2104      	movs	r1, #4
 80008cc:	480e      	ldr	r0, [pc, #56]	; (8000908 <displaySEG7_1+0x31c>)
 80008ce:	f001 fcfb 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80008d2:	2200      	movs	r2, #0
 80008d4:	2108      	movs	r1, #8
 80008d6:	480c      	ldr	r0, [pc, #48]	; (8000908 <displaySEG7_1+0x31c>)
 80008d8:	f001 fcf6 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 80008dc:	2201      	movs	r2, #1
 80008de:	2110      	movs	r1, #16
 80008e0:	4809      	ldr	r0, [pc, #36]	; (8000908 <displaySEG7_1+0x31c>)
 80008e2:	f001 fcf1 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 80008e6:	2200      	movs	r2, #0
 80008e8:	2120      	movs	r1, #32
 80008ea:	4807      	ldr	r0, [pc, #28]	; (8000908 <displaySEG7_1+0x31c>)
 80008ec:	f001 fcec 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80008f0:	2200      	movs	r2, #0
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <displaySEG7_1+0x31c>)
 80008f6:	f001 fce7 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 80008fa:	e000      	b.n	80008fe <displaySEG7_1+0x312>

	default:
		break;
 80008fc:	bf00      	nop
	}
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40010c00 	.word	0x40010c00

0800090c <displaySEG7_2>:


void displaySEG7_2(int num){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
switch(num){
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b09      	cmp	r3, #9
 8000918:	f200 81bc 	bhi.w	8000c94 <displaySEG7_2+0x388>
 800091c:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <displaySEG7_2+0x18>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	0800094d 	.word	0x0800094d
 8000928:	080009a1 	.word	0x080009a1
 800092c:	080009f5 	.word	0x080009f5
 8000930:	08000a49 	.word	0x08000a49
 8000934:	08000a9d 	.word	0x08000a9d
 8000938:	08000af1 	.word	0x08000af1
 800093c:	08000b45 	.word	0x08000b45
 8000940:	08000b99 	.word	0x08000b99
 8000944:	08000bed 	.word	0x08000bed
 8000948:	08000c41 	.word	0x08000c41
	case 0:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 800094c:	2200      	movs	r2, #0
 800094e:	2180      	movs	r1, #128	; 0x80
 8000950:	48d3      	ldr	r0, [pc, #844]	; (8000ca0 <displaySEG7_2+0x394>)
 8000952:	f001 fcb9 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095c:	48d0      	ldr	r0, [pc, #832]	; (8000ca0 <displaySEG7_2+0x394>)
 800095e:	f001 fcb3 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000968:	48cd      	ldr	r0, [pc, #820]	; (8000ca0 <displaySEG7_2+0x394>)
 800096a:	f001 fcad 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000974:	48ca      	ldr	r0, [pc, #808]	; (8000ca0 <displaySEG7_2+0x394>)
 8000976:	f001 fca7 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000980:	48c7      	ldr	r0, [pc, #796]	; (8000ca0 <displaySEG7_2+0x394>)
 8000982:	f001 fca1 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098c:	48c4      	ldr	r0, [pc, #784]	; (8000ca0 <displaySEG7_2+0x394>)
 800098e:	f001 fc9b 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 ) ;
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000998:	48c1      	ldr	r0, [pc, #772]	; (8000ca0 <displaySEG7_2+0x394>)
 800099a:	f001 fc95 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 800099e:	e17a      	b.n	8000c96 <displaySEG7_2+0x38a>

	case 1:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 1 ) ;
 80009a0:	2201      	movs	r2, #1
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	48be      	ldr	r0, [pc, #760]	; (8000ca0 <displaySEG7_2+0x394>)
 80009a6:	f001 fc8f 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b0:	48bb      	ldr	r0, [pc, #748]	; (8000ca0 <displaySEG7_2+0x394>)
 80009b2:	f001 fc89 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	48b8      	ldr	r0, [pc, #736]	; (8000ca0 <displaySEG7_2+0x394>)
 80009be:	f001 fc83 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 ) ;
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c8:	48b5      	ldr	r0, [pc, #724]	; (8000ca0 <displaySEG7_2+0x394>)
 80009ca:	f001 fc7d 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d4:	48b2      	ldr	r0, [pc, #712]	; (8000ca0 <displaySEG7_2+0x394>)
 80009d6:	f001 fc77 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e0:	48af      	ldr	r0, [pc, #700]	; (8000ca0 <displaySEG7_2+0x394>)
 80009e2:	f001 fc71 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 ) ;
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ec:	48ac      	ldr	r0, [pc, #688]	; (8000ca0 <displaySEG7_2+0x394>)
 80009ee:	f001 fc6b 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 80009f2:	e150      	b.n	8000c96 <displaySEG7_2+0x38a>

	case 2:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 80009f4:	2200      	movs	r2, #0
 80009f6:	2180      	movs	r1, #128	; 0x80
 80009f8:	48a9      	ldr	r0, [pc, #676]	; (8000ca0 <displaySEG7_2+0x394>)
 80009fa:	f001 fc65 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a04:	48a6      	ldr	r0, [pc, #664]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a06:	f001 fc5f 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 1 ) ;
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a10:	48a3      	ldr	r0, [pc, #652]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a12:	f001 fc59 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1c:	48a0      	ldr	r0, [pc, #640]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a1e:	f001 fc53 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a28:	489d      	ldr	r0, [pc, #628]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a2a:	f001 fc4d 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a34:	489a      	ldr	r0, [pc, #616]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a36:	f001 fc47 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a40:	4897      	ldr	r0, [pc, #604]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a42:	f001 fc41 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 8000a46:	e126      	b.n	8000c96 <displaySEG7_2+0x38a>

	case 3:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	4894      	ldr	r0, [pc, #592]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a4e:	f001 fc3b 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a58:	4891      	ldr	r0, [pc, #580]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a5a:	f001 fc35 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a64:	488e      	ldr	r0, [pc, #568]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a66:	f001 fc2f 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a70:	488b      	ldr	r0, [pc, #556]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a72:	f001 fc29 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7c:	4888      	ldr	r0, [pc, #544]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a7e:	f001 fc23 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a88:	4885      	ldr	r0, [pc, #532]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a8a:	f001 fc1d 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a94:	4882      	ldr	r0, [pc, #520]	; (8000ca0 <displaySEG7_2+0x394>)
 8000a96:	f001 fc17 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 8000a9a:	e0fc      	b.n	8000c96 <displaySEG7_2+0x38a>

	case 4:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 1 ) ;
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	487f      	ldr	r0, [pc, #508]	; (8000ca0 <displaySEG7_2+0x394>)
 8000aa2:	f001 fc11 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aac:	487c      	ldr	r0, [pc, #496]	; (8000ca0 <displaySEG7_2+0x394>)
 8000aae:	f001 fc0b 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab8:	4879      	ldr	r0, [pc, #484]	; (8000ca0 <displaySEG7_2+0x394>)
 8000aba:	f001 fc05 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 ) ;
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac4:	4876      	ldr	r0, [pc, #472]	; (8000ca0 <displaySEG7_2+0x394>)
 8000ac6:	f001 fbff 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad0:	4873      	ldr	r0, [pc, #460]	; (8000ca0 <displaySEG7_2+0x394>)
 8000ad2:	f001 fbf9 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000adc:	4870      	ldr	r0, [pc, #448]	; (8000ca0 <displaySEG7_2+0x394>)
 8000ade:	f001 fbf3 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae8:	486d      	ldr	r0, [pc, #436]	; (8000ca0 <displaySEG7_2+0x394>)
 8000aea:	f001 fbed 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 8000aee:	e0d2      	b.n	8000c96 <displaySEG7_2+0x38a>
	case 5:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000af0:	2200      	movs	r2, #0
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	486a      	ldr	r0, [pc, #424]	; (8000ca0 <displaySEG7_2+0x394>)
 8000af6:	f001 fbe7 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 1 ) ;
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b00:	4867      	ldr	r0, [pc, #412]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b02:	f001 fbe1 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0c:	4864      	ldr	r0, [pc, #400]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b0e:	f001 fbdb 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b18:	4861      	ldr	r0, [pc, #388]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b1a:	f001 fbd5 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b24:	485e      	ldr	r0, [pc, #376]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b26:	f001 fbcf 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b30:	485b      	ldr	r0, [pc, #364]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b32:	f001 fbc9 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3c:	4858      	ldr	r0, [pc, #352]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b3e:	f001 fbc3 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 8000b42:	e0a8      	b.n	8000c96 <displaySEG7_2+0x38a>

	case 6:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000b44:	2200      	movs	r2, #0
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	4855      	ldr	r0, [pc, #340]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b4a:	f001 fbbd 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 1 ) ;
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b54:	4852      	ldr	r0, [pc, #328]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b56:	f001 fbb7 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b60:	484f      	ldr	r0, [pc, #316]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b62:	f001 fbb1 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b6c:	484c      	ldr	r0, [pc, #304]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b6e:	f001 fbab 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b78:	4849      	ldr	r0, [pc, #292]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b7a:	f001 fba5 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b84:	4846      	ldr	r0, [pc, #280]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b86:	f001 fb9f 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b90:	4843      	ldr	r0, [pc, #268]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b92:	f001 fb99 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 8000b96:	e07e      	b.n	8000c96 <displaySEG7_2+0x38a>

	case 7:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	4840      	ldr	r0, [pc, #256]	; (8000ca0 <displaySEG7_2+0x394>)
 8000b9e:	f001 fb93 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba8:	483d      	ldr	r0, [pc, #244]	; (8000ca0 <displaySEG7_2+0x394>)
 8000baa:	f001 fb8d 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb4:	483a      	ldr	r0, [pc, #232]	; (8000ca0 <displaySEG7_2+0x394>)
 8000bb6:	f001 fb87 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 ) ;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc0:	4837      	ldr	r0, [pc, #220]	; (8000ca0 <displaySEG7_2+0x394>)
 8000bc2:	f001 fb81 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bcc:	4834      	ldr	r0, [pc, #208]	; (8000ca0 <displaySEG7_2+0x394>)
 8000bce:	f001 fb7b 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd8:	4831      	ldr	r0, [pc, #196]	; (8000ca0 <displaySEG7_2+0x394>)
 8000bda:	f001 fb75 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 ) ;
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be4:	482e      	ldr	r0, [pc, #184]	; (8000ca0 <displaySEG7_2+0x394>)
 8000be6:	f001 fb6f 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 8000bea:	e054      	b.n	8000c96 <displaySEG7_2+0x38a>

	case 8:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000bec:	2200      	movs	r2, #0
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	482b      	ldr	r0, [pc, #172]	; (8000ca0 <displaySEG7_2+0x394>)
 8000bf2:	f001 fb69 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfc:	4828      	ldr	r0, [pc, #160]	; (8000ca0 <displaySEG7_2+0x394>)
 8000bfe:	f001 fb63 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c08:	4825      	ldr	r0, [pc, #148]	; (8000ca0 <displaySEG7_2+0x394>)
 8000c0a:	f001 fb5d 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c14:	4822      	ldr	r0, [pc, #136]	; (8000ca0 <displaySEG7_2+0x394>)
 8000c16:	f001 fb57 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c20:	481f      	ldr	r0, [pc, #124]	; (8000ca0 <displaySEG7_2+0x394>)
 8000c22:	f001 fb51 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2c:	481c      	ldr	r0, [pc, #112]	; (8000ca0 <displaySEG7_2+0x394>)
 8000c2e:	f001 fb4b 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c38:	4819      	ldr	r0, [pc, #100]	; (8000ca0 <displaySEG7_2+0x394>)
 8000c3a:	f001 fb45 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 8000c3e:	e02a      	b.n	8000c96 <displaySEG7_2+0x38a>

	case 9:
		HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000c40:	2200      	movs	r2, #0
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	4816      	ldr	r0, [pc, #88]	; (8000ca0 <displaySEG7_2+0x394>)
 8000c46:	f001 fb3f 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c50:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <displaySEG7_2+0x394>)
 8000c52:	f001 fb39 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5c:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <displaySEG7_2+0x394>)
 8000c5e:	f001 fb33 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <displaySEG7_2+0x394>)
 8000c6a:	f001 fb2d 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c74:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <displaySEG7_2+0x394>)
 8000c76:	f001 fb27 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c80:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <displaySEG7_2+0x394>)
 8000c82:	f001 fb21 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <displaySEG7_2+0x394>)
 8000c8e:	f001 fb1b 	bl	80022c8 <HAL_GPIO_WritePin>
		break;
 8000c92:	e000      	b.n	8000c96 <displaySEG7_2+0x38a>

	default:
		break;
 8000c94:	bf00      	nop
	}
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40010c00 	.word	0x40010c00

08000ca4 <enable0>:
void enable0(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <enable0+0x20>)
 8000cb0:	f001 fb0a 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cba:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <enable0+0x20>)
 8000cbc:	f001 fb04 	bl	80022c8 <HAL_GPIO_WritePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40010800 	.word	0x40010800

08000cc8 <enable1>:

void enable1(){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <enable1+0x20>)
 8000cd4:	f001 faf8 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cde:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <enable1+0x20>)
 8000ce0:	f001 faf2 	bl	80022c8 <HAL_GPIO_WritePin>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40010800 	.word	0x40010800

08000cec <enable2>:

void enable2(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <enable2+0x20>)
 8000cf8:	f001 fae6 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d02:	4802      	ldr	r0, [pc, #8]	; (8000d0c <enable2+0x20>)
 8000d04:	f001 fae0 	bl	80022c8 <HAL_GPIO_WritePin>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40010800 	.word	0x40010800

08000d10 <enable3>:

void enable3(){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <enable3+0x20>)
 8000d1c:	f001 fad4 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d26:	4802      	ldr	r0, [pc, #8]	; (8000d30 <enable3+0x20>)
 8000d28:	f001 face 	bl	80022c8 <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40010800 	.word	0x40010800

08000d34 <enable4>:
void enable4(){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <enable4+0x20>)
 8000d40:	f001 fac2 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4a:	4802      	ldr	r0, [pc, #8]	; (8000d54 <enable4+0x20>)
 8000d4c:	f001 fabc 	bl	80022c8 <HAL_GPIO_WritePin>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40010800 	.word	0x40010800

08000d58 <enable5>:

void enable5(){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <enable5+0x20>)
 8000d64:	f001 fab0 	bl	80022c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6e:	4802      	ldr	r0, [pc, #8]	; (8000d78 <enable5+0x20>)
 8000d70:	f001 faaa 	bl	80022c8 <HAL_GPIO_WritePin>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40010800 	.word	0x40010800

08000d7c <showTimeDelay_First>:
void showTimeDelay_First(int first, int second){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	first--;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
	second--;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	603b      	str	r3, [r7, #0]
	enable0();
 8000d92:	f7ff ff87 	bl	8000ca4 <enable0>
	displaySEG7_1(first/10);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <showTimeDelay_First+0x50>)
 8000d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d9e:	1092      	asrs	r2, r2, #2
 8000da0:	17db      	asrs	r3, r3, #31
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc21 	bl	80005ec <displaySEG7_1>
	enable2();
 8000daa:	f7ff ff9f 	bl	8000cec <enable2>
	displaySEG7_2(second/10);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <showTimeDelay_First+0x50>)
 8000db2:	fb82 1203 	smull	r1, r2, r2, r3
 8000db6:	1092      	asrs	r2, r2, #2
 8000db8:	17db      	asrs	r3, r3, #31
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fda5 	bl	800090c <displaySEG7_2>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	66666667 	.word	0x66666667

08000dd0 <showTimeDelay_Second>:

void showTimeDelay_Second(int first, int second){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
	first--;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
	second--;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	603b      	str	r3, [r7, #0]
	enable1();
 8000de6:	f7ff ff6f 	bl	8000cc8 <enable1>
	displaySEG7_1(first%10);
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <showTimeDelay_Second+0x64>)
 8000dee:	fb83 1302 	smull	r1, r3, r3, r2
 8000df2:	1099      	asrs	r1, r3, #2
 8000df4:	17d3      	asrs	r3, r2, #31
 8000df6:	1ac9      	subs	r1, r1, r3
 8000df8:	460b      	mov	r3, r1
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	1ad1      	subs	r1, r2, r3
 8000e02:	4608      	mov	r0, r1
 8000e04:	f7ff fbf2 	bl	80005ec <displaySEG7_1>
	enable3();
 8000e08:	f7ff ff82 	bl	8000d10 <enable3>
	displaySEG7_2(second%10);
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <showTimeDelay_Second+0x64>)
 8000e10:	fb83 1302 	smull	r1, r3, r3, r2
 8000e14:	1099      	asrs	r1, r3, #2
 8000e16:	17d3      	asrs	r3, r2, #31
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	1ad1      	subs	r1, r2, r3
 8000e24:	4608      	mov	r0, r1
 8000e26:	f7ff fd71 	bl	800090c <displaySEG7_2>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	66666667 	.word	0x66666667

08000e38 <showTimeDelay1>:
void showTimeDelay1(int delaytime){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	delaytime--;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
	enable4();
 8000e46:	f7ff ff75 	bl	8000d34 <enable4>
	displaySEG7_1(delaytime/10);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <showTimeDelay1+0x30>)
 8000e4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e52:	1092      	asrs	r2, r2, #2
 8000e54:	17db      	asrs	r3, r3, #31
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fbc7 	bl	80005ec <displaySEG7_1>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	66666667 	.word	0x66666667

08000e6c <showTimeDelay2>:
void showTimeDelay2(int delaytime){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	delaytime--;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
	enable5();
 8000e7a:	f7ff ff6d 	bl	8000d58 <enable5>
	displaySEG7_2(delaytime%10);
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <showTimeDelay2+0x38>)
 8000e82:	fb83 1302 	smull	r1, r3, r3, r2
 8000e86:	1099      	asrs	r1, r3, #2
 8000e88:	17d3      	asrs	r3, r2, #31
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	1ad1      	subs	r1, r2, r3
 8000e96:	4608      	mov	r0, r1
 8000e98:	f7ff fd38 	bl	800090c <displaySEG7_2>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	66666667 	.word	0x66666667

08000ea8 <setValues>:


int countdownFirstCoupleLed;
int countdownSecondCoupleLed;

void setValues(void){
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	MODE = MODE1;
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <setValues+0x40>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
	autostate = RED_GREEN;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <setValues+0x44>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]

	modeSeg = FIRST;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <setValues+0x48>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]

	firstCoupleLedAutoState = LED_INIT;
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <setValues+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
	secondCoupleLedAutoState = LED_INIT;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <setValues+0x50>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	seg7AutoState = FIRST;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <setValues+0x54>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]

	countdownFirstCoupleLed = redDelay;
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <setValues+0x58>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <setValues+0x5c>)
 8000ed6:	6013      	str	r3, [r2, #0]
	countdownSecondCoupleLed = greenDelay;
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <setValues+0x60>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <setValues+0x64>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	20000090 	.word	0x20000090
 8000eec:	20000091 	.word	0x20000091
 8000ef0:	20000092 	.word	0x20000092
 8000ef4:	20000093 	.word	0x20000093
 8000ef8:	20000094 	.word	0x20000094
 8000efc:	20000095 	.word	0x20000095
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000098 	.word	0x20000098
 8000f08:	20000004 	.word	0x20000004
 8000f0c:	2000009c 	.word	0x2000009c

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f14:	f000 fe3a 	bl	8001b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f18:	f000 f828 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1c:	f000 f8d8 	bl	80010d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f20:	f000 f860 	bl	8000fe4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f24:	f000 f8aa 	bl	800107c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <main+0x50>)
 8000f2a:	f001 fe5f 	bl	8002bec <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000f2e:	f000 fa85 	bl	800143c <SCH_Init>
//  SCH_Add_Task(auto_run, 100, 25);
//  SCH_Add_Task(manual_run, 210, 25);
//  SCH_Add_Task(led3, 320, 150);
//  SCH_Add_Task(led4, 430, 200);
//  SCH_Add_Task(led5, 540, 250);
	SCH_Add_Task(led_fsm, 100, 100);
 8000f32:	2264      	movs	r2, #100	; 0x64
 8000f34:	2164      	movs	r1, #100	; 0x64
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <main+0x54>)
 8000f38:	f000 fb4c 	bl	80015d4 <SCH_Add_Task>
	SCH_Add_Task(seg_fsm, 110, 50);
 8000f3c:	2232      	movs	r2, #50	; 0x32
 8000f3e:	216e      	movs	r1, #110	; 0x6e
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <main+0x58>)
 8000f42:	f000 fb47 	bl	80015d4 <SCH_Add_Task>
  setValues();
 8000f46:	f7ff ffaf 	bl	8000ea8 <setValues>
  displayFirstLedCouple(LED_INIT);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff fa5c 	bl	8000408 <displayFirstLedCouple>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  auto_run();
 8000f50:	f7ff fa3a 	bl	80003c8 <auto_run>
	  manual_run();
 8000f54:	f000 f96c 	bl	8001230 <manual_run>
	  SCH_Dispatch_Task();
 8000f58:	f000 fb9a 	bl	8001690 <SCH_Dispatch_Task>
	  auto_run();
 8000f5c:	e7f8      	b.n	8000f50 <main+0x40>
 8000f5e:	bf00      	nop
 8000f60:	200000a0 	.word	0x200000a0
 8000f64:	0800014d 	.word	0x0800014d
 8000f68:	0800034d 	.word	0x0800034d

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b090      	sub	sp, #64	; 0x40
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	2228      	movs	r2, #40	; 0x28
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 f812 	bl	8003fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f92:	2301      	movs	r3, #1
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f96:	2310      	movs	r3, #16
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9e:	f107 0318 	add.w	r3, r7, #24
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 f9c2 	bl	800232c <HAL_RCC_OscConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fae:	f000 f919 	bl	80011e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fc30 	bl	8002830 <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fd6:	f000 f905 	bl	80011e4 <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3740      	adds	r7, #64	; 0x40
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_TIM2_Init+0x94>)
 8001002:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_TIM2_Init+0x94>)
 800100a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800100e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_TIM2_Init+0x94>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_TIM2_Init+0x94>)
 8001018:	220a      	movs	r2, #10
 800101a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_TIM2_Init+0x94>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_TIM2_Init+0x94>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <MX_TIM2_Init+0x94>)
 800102a:	f001 fd8f 	bl	8002b4c <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001034:	f000 f8d6 	bl	80011e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_TIM2_Init+0x94>)
 8001046:	f001 ff25 	bl	8002e94 <HAL_TIM_ConfigClockSource>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001050:	f000 f8c8 	bl	80011e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_TIM2_Init+0x94>)
 8001062:	f002 f8f1 	bl	8003248 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800106c:	f000 f8ba 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200000a0 	.word	0x200000a0

0800107c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <MX_USART2_UART_Init+0x50>)
 8001084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001088:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800108c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010b4:	f002 f932 	bl	800331c <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010be:	f000 f891 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000e8 	.word	0x200000e8
 80010cc:	40004400 	.word	0x40004400

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <MX_GPIO_Init+0xd4>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <MX_GPIO_Init+0xd4>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <MX_GPIO_Init+0xd4>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <MX_GPIO_Init+0xd4>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a28      	ldr	r2, [pc, #160]	; (80011a4 <MX_GPIO_Init+0xd4>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MX_GPIO_Init+0xd4>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <MX_GPIO_Init+0xd4>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <MX_GPIO_Init+0xd4>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <MX_GPIO_Init+0xd4>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 800112c:	2201      	movs	r2, #1
 800112e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8001132:	481d      	ldr	r0, [pc, #116]	; (80011a8 <MX_GPIO_Init+0xd8>)
 8001134:	f001 f8c8 	bl	80022c8 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1_Pin|C1_Pin|D2_Pin
 8001138:	2200      	movs	r2, #0
 800113a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800113e:	481b      	ldr	r0, [pc, #108]	; (80011ac <MX_GPIO_Init+0xdc>)
 8001140:	f001 f8c2 	bl	80022c8 <HAL_GPIO_WritePin>
                          |E2_Pin|F2_Pin|G2_Pin|D1_Pin
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001144:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114e:	2301      	movs	r3, #1
 8001150:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	4619      	mov	r1, r3
 8001158:	4815      	ldr	r0, [pc, #84]	; (80011b0 <MX_GPIO_Init+0xe0>)
 800115a:	f000 ff39 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin EN5_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 800115e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001162:	613b      	str	r3, [r7, #16]
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2302      	movs	r3, #2
 800116e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_GPIO_Init+0xd8>)
 8001178:	f000 ff2a 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin B1_Pin C1_Pin D2_Pin
                           E2_Pin F2_Pin G2_Pin D1_Pin
                           E1_Pin F1_Pin G1_Pin A2_Pin
                           B2_Pin C2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|D2_Pin
 800117c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001180:	613b      	str	r3, [r7, #16]
                          |E2_Pin|F2_Pin|G2_Pin|D1_Pin
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2302      	movs	r3, #2
 800118c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_GPIO_Init+0xdc>)
 8001196:	f000 ff1b 	bl	8001fd0 <HAL_GPIO_Init>

}
 800119a:	bf00      	nop
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010800 	.word	0x40010800
 80011ac:	40010c00 	.word	0x40010c00
 80011b0:	40011000 	.word	0x40011000

080011b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef * htim ) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	update_time();
 80011bc:	f000 fb20 	bl	8001800 <update_time>
	SCH_Update();
 80011c0:	f000 f982 	bl	80014c8 <SCH_Update>
	timerRun(0);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f000 fb73 	bl	80018b0 <timerRun>
	timerRun(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 fb70 	bl	80018b0 <timerRun>
	timerRun(2);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f000 fb6d 	bl	80018b0 <timerRun>
	timerRun(3);
 80011d6:	2003      	movs	r0, #3
 80011d8:	f000 fb6a 	bl	80018b0 <timerRun>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
}
 80011ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ec:	e7fe      	b.n	80011ec <Error_Handler+0x8>
	...

080011f0 <displayIncrease>:
 *      Author: ad
 */

#include "manual.h"

void displayIncrease(int delay){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	switch(modeSeg){
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <displayIncrease+0x3c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d002      	beq.n	8001206 <displayIncrease+0x16>
 8001200:	2b02      	cmp	r3, #2
 8001202:	d007      	beq.n	8001214 <displayIncrease+0x24>
		case SECOND:
			showTimeDelay2(delay);
			modeSeg = FIRST;
			break;
		default:
			break;
 8001204:	e00d      	b.n	8001222 <displayIncrease+0x32>
			showTimeDelay1(delay);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fe16 	bl	8000e38 <showTimeDelay1>
			modeSeg = SECOND;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <displayIncrease+0x3c>)
 800120e:	2202      	movs	r2, #2
 8001210:	701a      	strb	r2, [r3, #0]
			break;
 8001212:	e006      	b.n	8001222 <displayIncrease+0x32>
			showTimeDelay2(delay);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fe29 	bl	8000e6c <showTimeDelay2>
			modeSeg = FIRST;
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <displayIncrease+0x3c>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
			break;
 8001220:	bf00      	nop
	}
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000092 	.word	0x20000092

08001230 <manual_run>:

void manual_run(){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	switch(MODE){
 8001234:	4b7b      	ldr	r3, [pc, #492]	; (8001424 <manual_run+0x1f4>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b04      	cmp	r3, #4
 800123a:	f000 80a1 	beq.w	8001380 <manual_run+0x150>
 800123e:	2b04      	cmp	r3, #4
 8001240:	f300 80e6 	bgt.w	8001410 <manual_run+0x1e0>
 8001244:	2b02      	cmp	r3, #2
 8001246:	d002      	beq.n	800124e <manual_run+0x1e>
 8001248:	2b03      	cmp	r3, #3
 800124a:	d04d      	beq.n	80012e8 <manual_run+0xb8>
				HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
										                          |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_SET);
			}
			break;
		default:
			break;
 800124c:	e0e0      	b.n	8001410 <manual_run+0x1e0>
			if(timer_flag[3] == 1){
 800124e:	4b76      	ldr	r3, [pc, #472]	; (8001428 <manual_run+0x1f8>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d10b      	bne.n	800126e <manual_run+0x3e>
				toggleLeds(RED);
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff f996 	bl	8000588 <toggleLeds>
				displayIncrease(redDelay);
 800125c:	4b73      	ldr	r3, [pc, #460]	; (800142c <manual_run+0x1fc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffc5 	bl	80011f0 <displayIncrease>
				setTimer(3, 25);
 8001266:	2119      	movs	r1, #25
 8001268:	2003      	movs	r0, #3
 800126a:	f000 fb09 	bl	8001880 <setTimer>
			if (isButtonPressed(1)==1){
 800126e:	2001      	movs	r0, #1
 8001270:	f7ff f8b0 	bl	80003d4 <isButtonPressed>
 8001274:	4603      	mov	r3, r0
 8001276:	2b01      	cmp	r3, #1
 8001278:	d110      	bne.n	800129c <manual_run+0x6c>
				redDelay +=1;
 800127a:	4b6c      	ldr	r3, [pc, #432]	; (800142c <manual_run+0x1fc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a6a      	ldr	r2, [pc, #424]	; (800142c <manual_run+0x1fc>)
 8001282:	6013      	str	r3, [r2, #0]
				greenDelay +=1;
 8001284:	4b6a      	ldr	r3, [pc, #424]	; (8001430 <manual_run+0x200>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	4a69      	ldr	r2, [pc, #420]	; (8001430 <manual_run+0x200>)
 800128c:	6013      	str	r3, [r2, #0]
				if(redDelay >= 99) redDelay = 1;
 800128e:	4b67      	ldr	r3, [pc, #412]	; (800142c <manual_run+0x1fc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b62      	cmp	r3, #98	; 0x62
 8001294:	dd02      	ble.n	800129c <manual_run+0x6c>
 8001296:	4b65      	ldr	r3, [pc, #404]	; (800142c <manual_run+0x1fc>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(2)==1){
 800129c:	2002      	movs	r0, #2
 800129e:	f7ff f899 	bl	80003d4 <isButtonPressed>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10a      	bne.n	80012be <manual_run+0x8e>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80012ae:	4861      	ldr	r0, [pc, #388]	; (8001434 <manual_run+0x204>)
 80012b0:	f001 f80a 	bl	80022c8 <HAL_GPIO_WritePin>
				MODE = MODE1;
 80012b4:	4b5b      	ldr	r3, [pc, #364]	; (8001424 <manual_run+0x1f4>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
				setValues();
 80012ba:	f7ff fdf5 	bl	8000ea8 <setValues>
			if (isButtonPressed(0) == 1){
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff f888 	bl	80003d4 <isButtonPressed>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	f040 80a4 	bne.w	8001414 <manual_run+0x1e4>
				setTimer(3, 25);
 80012cc:	2119      	movs	r1, #25
 80012ce:	2003      	movs	r0, #3
 80012d0:	f000 fad6 	bl	8001880 <setTimer>
				MODE = MODE3;
 80012d4:	4b53      	ldr	r3, [pc, #332]	; (8001424 <manual_run+0x1f4>)
 80012d6:	2203      	movs	r2, #3
 80012d8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80012e0:	4854      	ldr	r0, [pc, #336]	; (8001434 <manual_run+0x204>)
 80012e2:	f000 fff1 	bl	80022c8 <HAL_GPIO_WritePin>
			break;
 80012e6:	e095      	b.n	8001414 <manual_run+0x1e4>
			if(timer_flag[3] == 1){
 80012e8:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <manual_run+0x1f8>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d10b      	bne.n	8001308 <manual_run+0xd8>
				toggleLeds(YELLOW);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f7ff f949 	bl	8000588 <toggleLeds>
				displayIncrease(yellowDelay);
 80012f6:	4b50      	ldr	r3, [pc, #320]	; (8001438 <manual_run+0x208>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff78 	bl	80011f0 <displayIncrease>
				setTimer(3, 25);
 8001300:	2119      	movs	r1, #25
 8001302:	2003      	movs	r0, #3
 8001304:	f000 fabc 	bl	8001880 <setTimer>
			if (isButtonPressed(1)==1){
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff f863 	bl	80003d4 <isButtonPressed>
 800130e:	4603      	mov	r3, r0
 8001310:	2b01      	cmp	r3, #1
 8001312:	d110      	bne.n	8001336 <manual_run+0x106>
				yellowDelay +=1;
 8001314:	4b48      	ldr	r3, [pc, #288]	; (8001438 <manual_run+0x208>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	4a47      	ldr	r2, [pc, #284]	; (8001438 <manual_run+0x208>)
 800131c:	6013      	str	r3, [r2, #0]
				redDelay+=1;
 800131e:	4b43      	ldr	r3, [pc, #268]	; (800142c <manual_run+0x1fc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a41      	ldr	r2, [pc, #260]	; (800142c <manual_run+0x1fc>)
 8001326:	6013      	str	r3, [r2, #0]
				if(yellowDelay >= 99) yellowDelay = 1;
 8001328:	4b43      	ldr	r3, [pc, #268]	; (8001438 <manual_run+0x208>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b62      	cmp	r3, #98	; 0x62
 800132e:	dd02      	ble.n	8001336 <manual_run+0x106>
 8001330:	4b41      	ldr	r3, [pc, #260]	; (8001438 <manual_run+0x208>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(2)==1){
 8001336:	2002      	movs	r0, #2
 8001338:	f7ff f84c 	bl	80003d4 <isButtonPressed>
 800133c:	4603      	mov	r3, r0
 800133e:	2b01      	cmp	r3, #1
 8001340:	d10a      	bne.n	8001358 <manual_run+0x128>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001348:	483a      	ldr	r0, [pc, #232]	; (8001434 <manual_run+0x204>)
 800134a:	f000 ffbd 	bl	80022c8 <HAL_GPIO_WritePin>
				MODE = MODE1;
 800134e:	4b35      	ldr	r3, [pc, #212]	; (8001424 <manual_run+0x1f4>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
				setValues();
 8001354:	f7ff fda8 	bl	8000ea8 <setValues>
			if (isButtonPressed(0) == 1){
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff f83b 	bl	80003d4 <isButtonPressed>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d159      	bne.n	8001418 <manual_run+0x1e8>
				MODE = MODE4;
 8001364:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <manual_run+0x1f4>)
 8001366:	2204      	movs	r2, #4
 8001368:	701a      	strb	r2, [r3, #0]
				setTimer(3, 25);
 800136a:	2119      	movs	r1, #25
 800136c:	2003      	movs	r0, #3
 800136e:	f000 fa87 	bl	8001880 <setTimer>
				HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001378:	482e      	ldr	r0, [pc, #184]	; (8001434 <manual_run+0x204>)
 800137a:	f000 ffa5 	bl	80022c8 <HAL_GPIO_WritePin>
			break;
 800137e:	e04b      	b.n	8001418 <manual_run+0x1e8>
			if(timer_flag[3] == 1){
 8001380:	4b29      	ldr	r3, [pc, #164]	; (8001428 <manual_run+0x1f8>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10b      	bne.n	80013a0 <manual_run+0x170>
				toggleLeds(GREEN);
 8001388:	2002      	movs	r0, #2
 800138a:	f7ff f8fd 	bl	8000588 <toggleLeds>
				displayIncrease(greenDelay);
 800138e:	4b28      	ldr	r3, [pc, #160]	; (8001430 <manual_run+0x200>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff2c 	bl	80011f0 <displayIncrease>
				setTimer(3, 25);
 8001398:	2119      	movs	r1, #25
 800139a:	2003      	movs	r0, #3
 800139c:	f000 fa70 	bl	8001880 <setTimer>
			if (isButtonPressed(1)==1){
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff f817 	bl	80003d4 <isButtonPressed>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d110      	bne.n	80013ce <manual_run+0x19e>
				redDelay +=1;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <manual_run+0x1fc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <manual_run+0x1fc>)
 80013b4:	6013      	str	r3, [r2, #0]
				greenDelay +=1;
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <manual_run+0x200>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <manual_run+0x200>)
 80013be:	6013      	str	r3, [r2, #0]
				if(greenDelay >= 99) greenDelay = 1;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <manual_run+0x200>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b62      	cmp	r3, #98	; 0x62
 80013c6:	dd02      	ble.n	80013ce <manual_run+0x19e>
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <manual_run+0x200>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(2)==1){
 80013ce:	2002      	movs	r0, #2
 80013d0:	f7ff f800 	bl	80003d4 <isButtonPressed>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d10a      	bne.n	80013f0 <manual_run+0x1c0>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80013e0:	4814      	ldr	r0, [pc, #80]	; (8001434 <manual_run+0x204>)
 80013e2:	f000 ff71 	bl	80022c8 <HAL_GPIO_WritePin>
				MODE = MODE1;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <manual_run+0x1f4>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
				setValues();
 80013ec:	f7ff fd5c 	bl	8000ea8 <setValues>
			if (isButtonPressed(0) == 1){
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7fe ffef 	bl	80003d4 <isButtonPressed>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10f      	bne.n	800141c <manual_run+0x1ec>
				MODE = MODE1;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <manual_run+0x1f4>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8001402:	2201      	movs	r2, #1
 8001404:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001408:	480a      	ldr	r0, [pc, #40]	; (8001434 <manual_run+0x204>)
 800140a:	f000 ff5d 	bl	80022c8 <HAL_GPIO_WritePin>
			break;
 800140e:	e005      	b.n	800141c <manual_run+0x1ec>
			break;
 8001410:	bf00      	nop
 8001412:	e004      	b.n	800141e <manual_run+0x1ee>
			break;
 8001414:	bf00      	nop
 8001416:	e002      	b.n	800141e <manual_run+0x1ee>
			break;
 8001418:	bf00      	nop
 800141a:	e000      	b.n	800141e <manual_run+0x1ee>
			break;
 800141c:	bf00      	nop
	}
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000090 	.word	0x20000090
 8001428:	20000224 	.word	0x20000224
 800142c:	20000000 	.word	0x20000000
 8001430:	20000004 	.word	0x20000004
 8001434:	40010800 	.word	0x40010800
 8001438:	20000008 	.word	0x20000008

0800143c <SCH_Init>:
#include "main.h"

int global_time=0;

sTask SCH_tasks_G [SCH_MAX_TASKS];
void SCH_Init(void) {
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i=0;i<SCH_MAX_TASKS;i++) {
 8001442:	2300      	movs	r3, #0
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	e034      	b.n	80014b2 <SCH_Init+0x76>
		SCH_tasks_G[i].pTask = 0x0000;
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	491e      	ldr	r1, [pc, #120]	; (80014c4 <SCH_Init+0x88>)
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Delay = 0;
 800145a:	79fa      	ldrb	r2, [r7, #7]
 800145c:	4919      	ldr	r1, [pc, #100]	; (80014c4 <SCH_Init+0x88>)
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	3304      	adds	r3, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Period = 0;
 800146e:	79fa      	ldrb	r2, [r7, #7]
 8001470:	4914      	ldr	r1, [pc, #80]	; (80014c4 <SCH_Init+0x88>)
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	3308      	adds	r3, #8
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].RunMe = 0;
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	490f      	ldr	r1, [pc, #60]	; (80014c4 <SCH_Init+0x88>)
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	330c      	adds	r3, #12
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[i].TaskID = -1;
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	490a      	ldr	r1, [pc, #40]	; (80014c4 <SCH_Init+0x88>)
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	3310      	adds	r3, #16
 80014a6:	f04f 32ff 	mov.w	r2, #4294967295
 80014aa:	601a      	str	r2, [r3, #0]
	for (i=0;i<SCH_MAX_TASKS;i++) {
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	3301      	adds	r3, #1
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	d9c7      	bls.n	8001448 <SCH_Init+0xc>
	}
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	20000134 	.word	0x20000134

080014c8 <SCH_Update>:

void SCH_Update(void) {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
	unsigned char index;
	for (index=0;index<SCH_MAX_TASKS;index++) {
 80014ce:	2300      	movs	r3, #0
 80014d0:	71fb      	strb	r3, [r7, #7]
 80014d2:	e073      	b.n	80015bc <SCH_Update+0xf4>
		 if (SCH_tasks_G[index].pTask && SCH_tasks_G[index].Delay==0) {
 80014d4:	79fa      	ldrb	r2, [r7, #7]
 80014d6:	493e      	ldr	r1, [pc, #248]	; (80015d0 <SCH_Update+0x108>)
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d03e      	beq.n	8001566 <SCH_Update+0x9e>
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	4939      	ldr	r1, [pc, #228]	; (80015d0 <SCH_Update+0x108>)
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	3304      	adds	r3, #4
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d133      	bne.n	8001566 <SCH_Update+0x9e>
			SCH_tasks_G[index].RunMe += 1;
 80014fe:	79fa      	ldrb	r2, [r7, #7]
 8001500:	4933      	ldr	r1, [pc, #204]	; (80015d0 <SCH_Update+0x108>)
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	330c      	adds	r3, #12
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	3301      	adds	r3, #1
 8001514:	b2d8      	uxtb	r0, r3
 8001516:	492e      	ldr	r1, [pc, #184]	; (80015d0 <SCH_Update+0x108>)
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	330c      	adds	r3, #12
 8001524:	4602      	mov	r2, r0
 8001526:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[index].Period) {
 8001528:	79fa      	ldrb	r2, [r7, #7]
 800152a:	4929      	ldr	r1, [pc, #164]	; (80015d0 <SCH_Update+0x108>)
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3308      	adds	r3, #8
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d03b      	beq.n	80015b6 <SCH_Update+0xee>
				SCH_tasks_G[index].Delay = SCH_tasks_G[index].Period-1;
 800153e:	79fa      	ldrb	r2, [r7, #7]
 8001540:	4923      	ldr	r1, [pc, #140]	; (80015d0 <SCH_Update+0x108>)
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	3308      	adds	r3, #8
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	79fa      	ldrb	r2, [r7, #7]
 8001552:	1e59      	subs	r1, r3, #1
 8001554:	481e      	ldr	r0, [pc, #120]	; (80015d0 <SCH_Update+0x108>)
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4403      	add	r3, r0
 8001560:	3304      	adds	r3, #4
 8001562:	6019      	str	r1, [r3, #0]
			if (SCH_tasks_G[index].Period) {
 8001564:	e027      	b.n	80015b6 <SCH_Update+0xee>
			}
		} else if (SCH_tasks_G[index].pTask && SCH_tasks_G[index].Delay>0) {
 8001566:	79fa      	ldrb	r2, [r7, #7]
 8001568:	4919      	ldr	r1, [pc, #100]	; (80015d0 <SCH_Update+0x108>)
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01d      	beq.n	80015b6 <SCH_Update+0xee>
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	4914      	ldr	r1, [pc, #80]	; (80015d0 <SCH_Update+0x108>)
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	3304      	adds	r3, #4
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d012      	beq.n	80015b6 <SCH_Update+0xee>
			SCH_tasks_G[index].Delay-=1;
 8001590:	79fa      	ldrb	r2, [r7, #7]
 8001592:	490f      	ldr	r1, [pc, #60]	; (80015d0 <SCH_Update+0x108>)
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	3304      	adds	r3, #4
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	79fa      	ldrb	r2, [r7, #7]
 80015a4:	1e59      	subs	r1, r3, #1
 80015a6:	480a      	ldr	r0, [pc, #40]	; (80015d0 <SCH_Update+0x108>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4403      	add	r3, r0
 80015b2:	3304      	adds	r3, #4
 80015b4:	6019      	str	r1, [r3, #0]
	for (index=0;index<SCH_MAX_TASKS;index++) {
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	3301      	adds	r3, #1
 80015ba:	71fb      	strb	r3, [r7, #7]
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b09      	cmp	r3, #9
 80015c0:	d988      	bls.n	80014d4 <SCH_Update+0xc>
		}
	}
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000134 	.word	0x20000134

080015d4 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
	unsigned char index=0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].pTask != 0x0000) && (index < SCH_MAX_TASKS)) {
 80015e4:	e002      	b.n	80015ec <SCH_Add_Task+0x18>
		index++;
 80015e6:	7dfb      	ldrb	r3, [r7, #23]
 80015e8:	3301      	adds	r3, #1
 80015ea:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].pTask != 0x0000) && (index < SCH_MAX_TASKS)) {
 80015ec:	7dfa      	ldrb	r2, [r7, #23]
 80015ee:	4927      	ldr	r1, [pc, #156]	; (800168c <SCH_Add_Task+0xb8>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <SCH_Add_Task+0x32>
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	2b09      	cmp	r3, #9
 8001604:	d9ef      	bls.n	80015e6 <SCH_Add_Task+0x12>
	}
	if (index>=SCH_MAX_TASKS) {
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	2b09      	cmp	r3, #9
 800160a:	d902      	bls.n	8001612 <SCH_Add_Task+0x3e>
		return -1;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	e037      	b.n	8001682 <SCH_Add_Task+0xae>
	}
	SCH_tasks_G [ index ].pTask = pFunction;
 8001612:	7dfa      	ldrb	r2, [r7, #23]
 8001614:	491d      	ldr	r1, [pc, #116]	; (800168c <SCH_Add_Task+0xb8>)
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [ index ].Delay = (DELAY == 0)?0:DELAY-1;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <SCH_Add_Task+0x5c>
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1e5a      	subs	r2, r3, #1
 800162e:	e000      	b.n	8001632 <SCH_Add_Task+0x5e>
 8001630:	2200      	movs	r2, #0
 8001632:	7df9      	ldrb	r1, [r7, #23]
 8001634:	4815      	ldr	r0, [pc, #84]	; (800168c <SCH_Add_Task+0xb8>)
 8001636:	460b      	mov	r3, r1
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4403      	add	r3, r0
 8001640:	3304      	adds	r3, #4
 8001642:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [ index ].Period = PERIOD ;
 8001644:	7dfa      	ldrb	r2, [r7, #23]
 8001646:	4911      	ldr	r1, [pc, #68]	; (800168c <SCH_Add_Task+0xb8>)
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	3308      	adds	r3, #8
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	601a      	str	r2, [r3, #0]
	SCH_tasks_G [ index ].RunMe = 0 ;
 8001658:	7dfa      	ldrb	r2, [r7, #23]
 800165a:	490c      	ldr	r1, [pc, #48]	; (800168c <SCH_Add_Task+0xb8>)
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	330c      	adds	r3, #12
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G [ index ].TaskID = index;
 800166c:	7dfa      	ldrb	r2, [r7, #23]
 800166e:	7df9      	ldrb	r1, [r7, #23]
 8001670:	4806      	ldr	r0, [pc, #24]	; (800168c <SCH_Add_Task+0xb8>)
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4403      	add	r3, r0
 800167c:	3310      	adds	r3, #16
 800167e:	6019      	str	r1, [r3, #0]
	return index;
 8001680:	7dfb      	ldrb	r3, [r7, #23]
}
 8001682:	4618      	mov	r0, r3
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000134 	.word	0x20000134

08001690 <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
	unsigned char index;
	for (index=0;index<SCH_MAX_TASKS;index++) {
 8001696:	2300      	movs	r3, #0
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	e054      	b.n	8001746 <SCH_Dispatch_Task+0xb6>
		if (SCH_tasks_G[index].RunMe>0) {
 800169c:	79fa      	ldrb	r2, [r7, #7]
 800169e:	492e      	ldr	r1, [pc, #184]	; (8001758 <SCH_Dispatch_Task+0xc8>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	330c      	adds	r3, #12
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d046      	beq.n	8001740 <SCH_Dispatch_Task+0xb0>
			(*SCH_tasks_G[index].pTask)();
 80016b2:	79fa      	ldrb	r2, [r7, #7]
 80016b4:	4928      	ldr	r1, [pc, #160]	; (8001758 <SCH_Dispatch_Task+0xc8>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4798      	blx	r3
			SCH_tasks_G[index].RunMe -= 1;
 80016c4:	79fa      	ldrb	r2, [r7, #7]
 80016c6:	4924      	ldr	r1, [pc, #144]	; (8001758 <SCH_Dispatch_Task+0xc8>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	330c      	adds	r3, #12
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	79fa      	ldrb	r2, [r7, #7]
 80016d8:	3b01      	subs	r3, #1
 80016da:	b2d8      	uxtb	r0, r3
 80016dc:	491e      	ldr	r1, [pc, #120]	; (8001758 <SCH_Dispatch_Task+0xc8>)
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	330c      	adds	r3, #12
 80016ea:	4602      	mov	r2, r0
 80016ec:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[index].Period == 0 && SCH_tasks_G[index].RunMe == 0 && SCH_tasks_G[index].Delay==0) {
 80016ee:	79fa      	ldrb	r2, [r7, #7]
 80016f0:	4919      	ldr	r1, [pc, #100]	; (8001758 <SCH_Dispatch_Task+0xc8>)
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	3308      	adds	r3, #8
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d119      	bne.n	8001738 <SCH_Dispatch_Task+0xa8>
 8001704:	79fa      	ldrb	r2, [r7, #7]
 8001706:	4914      	ldr	r1, [pc, #80]	; (8001758 <SCH_Dispatch_Task+0xc8>)
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	330c      	adds	r3, #12
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10e      	bne.n	8001738 <SCH_Dispatch_Task+0xa8>
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	490e      	ldr	r1, [pc, #56]	; (8001758 <SCH_Dispatch_Task+0xc8>)
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	3304      	adds	r3, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d103      	bne.n	8001738 <SCH_Dispatch_Task+0xa8>
				SCH_Delete_Task(index);
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f812 	bl	800175c <SCH_Delete_Task>
			}
			timestamp(index);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f86e 	bl	800181c <timestamp>
	for (index=0;index<SCH_MAX_TASKS;index++) {
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	3301      	adds	r3, #1
 8001744:	71fb      	strb	r3, [r7, #7]
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b09      	cmp	r3, #9
 800174a:	d9a7      	bls.n	800169c <SCH_Dispatch_Task+0xc>
		}

	}
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000134 	.word	0x20000134

0800175c <SCH_Delete_Task>:

uint32_t SCH_Delete_Task(uint32_t TASK_INDEX) {
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	if (TASK_INDEX < 0 || TASK_INDEX >= SCH_MAX_TASKS) {
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b09      	cmp	r3, #9
 8001768:	d902      	bls.n	8001770 <SCH_Delete_Task+0x14>
		return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e03f      	b.n	80017f0 <SCH_Delete_Task+0x94>
	}
	if (SCH_tasks_G[TASK_INDEX].pTask==0x0000) {
 8001770:	4922      	ldr	r1, [pc, #136]	; (80017fc <SCH_Delete_Task+0xa0>)
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <SCH_Delete_Task+0x2e>
		return -1;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	e032      	b.n	80017f0 <SCH_Delete_Task+0x94>
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 800178a:	491c      	ldr	r1, [pc, #112]	; (80017fc <SCH_Delete_Task+0xa0>)
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 800179c:	4917      	ldr	r1, [pc, #92]	; (80017fc <SCH_Delete_Task+0xa0>)
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	3304      	adds	r3, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 80017b0:	4912      	ldr	r1, [pc, #72]	; (80017fc <SCH_Delete_Task+0xa0>)
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	3308      	adds	r3, #8
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 80017c4:	490d      	ldr	r1, [pc, #52]	; (80017fc <SCH_Delete_Task+0xa0>)
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	330c      	adds	r3, #12
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].TaskID = -1;
 80017d8:	4908      	ldr	r1, [pc, #32]	; (80017fc <SCH_Delete_Task+0xa0>)
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3310      	adds	r3, #16
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	601a      	str	r2, [r3, #0]
	return TASK_INDEX;
 80017ee:	687b      	ldr	r3, [r7, #4]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000134 	.word	0x20000134

08001800 <update_time>:

void update_time() {
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
	global_time+=10;
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <update_time+0x18>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	330a      	adds	r3, #10
 800180a:	4a03      	ldr	r2, [pc, #12]	; (8001818 <update_time+0x18>)
 800180c:	6013      	str	r3, [r2, #0]
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000130 	.word	0x20000130

0800181c <timestamp>:

void timestamp(unsigned char index) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
	char str[30];
	HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, "TaskID: %d", index), 1000);
 8001826:	79fa      	ldrb	r2, [r7, #7]
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	4910      	ldr	r1, [pc, #64]	; (8001870 <timestamp+0x54>)
 800182e:	4618      	mov	r0, r3
 8001830:	f002 fb98 	bl	8003f64 <siprintf>
 8001834:	4603      	mov	r3, r0
 8001836:	b29a      	uxth	r2, r3
 8001838:	f107 0108 	add.w	r1, r7, #8
 800183c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001840:	480c      	ldr	r0, [pc, #48]	; (8001874 <timestamp+0x58>)
 8001842:	f001 fdbb 	bl	80033bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (void*) str, sprintf(str, " timeout at %d\r", global_time), 1000);
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <timestamp+0x5c>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	490b      	ldr	r1, [pc, #44]	; (800187c <timestamp+0x60>)
 8001850:	4618      	mov	r0, r3
 8001852:	f002 fb87 	bl	8003f64 <siprintf>
 8001856:	4603      	mov	r3, r0
 8001858:	b29a      	uxth	r2, r3
 800185a:	f107 0108 	add.w	r1, r7, #8
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	4804      	ldr	r0, [pc, #16]	; (8001874 <timestamp+0x58>)
 8001864:	f001 fdaa 	bl	80033bc <HAL_UART_Transmit>
}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	; 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	080048e0 	.word	0x080048e0
 8001874:	200000e8 	.word	0x200000e8
 8001878:	20000130 	.word	0x20000130
 800187c:	080048ec 	.word	0x080048ec

08001880 <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int timer_ID, int duration){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
	timer_counter[timer_ID] = duration;
 800188a:	4907      	ldr	r1, [pc, #28]	; (80018a8 <setTimer+0x28>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer_ID] = 0;
 8001894:	4a05      	ldr	r2, [pc, #20]	; (80018ac <setTimer+0x2c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2100      	movs	r1, #0
 800189a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	200001fc 	.word	0x200001fc
 80018ac:	20000224 	.word	0x20000224

080018b0 <timerRun>:
void timerRun(int timer_ID){
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	if(timer_counter[timer_ID] > 0){
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <timerRun+0x48>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	dd13      	ble.n	80018ec <timerRun+0x3c>
		timer_counter[timer_ID]--;
 80018c4:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <timerRun+0x48>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	490a      	ldr	r1, [pc, #40]	; (80018f8 <timerRun+0x48>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[timer_ID] <= 0){
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <timerRun+0x48>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	dc04      	bgt.n	80018ec <timerRun+0x3c>
			timer_flag[timer_ID] = 1;
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <timerRun+0x4c>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2101      	movs	r1, #1
 80018e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	200001fc 	.word	0x200001fc
 80018fc:	20000224 	.word	0x20000224

08001900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_MspInit+0x5c>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_MspInit+0x5c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6193      	str	r3, [r2, #24]
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_MspInit+0x5c>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_MspInit+0x5c>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	4a0e      	ldr	r2, [pc, #56]	; (800195c <HAL_MspInit+0x5c>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	61d3      	str	r3, [r2, #28]
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_MspInit+0x5c>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_MspInit+0x60>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_MspInit+0x60>)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	40021000 	.word	0x40021000
 8001960:	40010000 	.word	0x40010000

08001964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001974:	d113      	bne.n	800199e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <HAL_TIM_Base_MspInit+0x44>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <HAL_TIM_Base_MspInit+0x44>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_TIM_Base_MspInit+0x44>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	201c      	movs	r0, #28
 8001994:	f000 fa33 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001998:	201c      	movs	r0, #28
 800199a:	f000 fa4c 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <HAL_UART_MspInit+0x98>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d137      	bne.n	8001a3c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d6:	61d3      	str	r3, [r2, #28]
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_UART_MspInit+0x9c>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019fc:	2304      	movs	r3, #4
 80019fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480f      	ldr	r0, [pc, #60]	; (8001a4c <HAL_UART_MspInit+0xa0>)
 8001a10:	f000 fade 	bl	8001fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a14:	2308      	movs	r3, #8
 8001a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	4809      	ldr	r0, [pc, #36]	; (8001a4c <HAL_UART_MspInit+0xa0>)
 8001a28:	f000 fad2 	bl	8001fd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2026      	movs	r0, #38	; 0x26
 8001a32:	f000 f9e4 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a36:	2026      	movs	r0, #38	; 0x26
 8001a38:	f000 f9fd 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40004400 	.word	0x40004400
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010800 	.word	0x40010800

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <NMI_Handler+0x4>

08001a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a96:	f000 f8bf 	bl	8001c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <TIM2_IRQHandler+0x10>)
 8001aa6:	f001 f8ed 	bl	8002c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200000a0 	.word	0x200000a0

08001ab4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <USART2_IRQHandler+0x10>)
 8001aba:	f001 fd03 	bl	80034c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200000e8 	.word	0x200000e8

08001ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <_sbrk+0x5c>)
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <_sbrk+0x60>)
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <_sbrk+0x64>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <_sbrk+0x68>)
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d207      	bcs.n	8001b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af8:	f002 fa5c 	bl	8003fb4 <__errno>
 8001afc:	4603      	mov	r3, r0
 8001afe:	220c      	movs	r2, #12
 8001b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	e009      	b.n	8001b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <_sbrk+0x64>)
 8001b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20002800 	.word	0x20002800
 8001b28:	00000400 	.word	0x00000400
 8001b2c:	2000024c 	.word	0x2000024c
 8001b30:	200003a0 	.word	0x200003a0

08001b34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <Reset_Handler>:
 8001b40:	f7ff fff8 	bl	8001b34 <SystemInit>
 8001b44:	480b      	ldr	r0, [pc, #44]	; (8001b74 <LoopFillZerobss+0xe>)
 8001b46:	490c      	ldr	r1, [pc, #48]	; (8001b78 <LoopFillZerobss+0x12>)
 8001b48:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <LoopFillZerobss+0x16>)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e002      	b.n	8001b54 <LoopCopyDataInit>

08001b4e <CopyDataInit>:
 8001b4e:	58d4      	ldr	r4, [r2, r3]
 8001b50:	50c4      	str	r4, [r0, r3]
 8001b52:	3304      	adds	r3, #4

08001b54 <LoopCopyDataInit>:
 8001b54:	18c4      	adds	r4, r0, r3
 8001b56:	428c      	cmp	r4, r1
 8001b58:	d3f9      	bcc.n	8001b4e <CopyDataInit>
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <LoopFillZerobss+0x1a>)
 8001b5c:	4c09      	ldr	r4, [pc, #36]	; (8001b84 <LoopFillZerobss+0x1e>)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e001      	b.n	8001b66 <LoopFillZerobss>

08001b62 <FillZerobss>:
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	3204      	adds	r2, #4

08001b66 <LoopFillZerobss>:
 8001b66:	42a2      	cmp	r2, r4
 8001b68:	d3fb      	bcc.n	8001b62 <FillZerobss>
 8001b6a:	f002 fa29 	bl	8003fc0 <__libc_init_array>
 8001b6e:	f7ff f9cf 	bl	8000f10 <main>
 8001b72:	4770      	bx	lr
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000068 	.word	0x20000068
 8001b7c:	08004964 	.word	0x08004964
 8001b80:	20000068 	.word	0x20000068
 8001b84:	2000039c 	.word	0x2000039c

08001b88 <ADC1_2_IRQHandler>:
 8001b88:	e7fe      	b.n	8001b88 <ADC1_2_IRQHandler>
	...

08001b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_Init+0x28>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_Init+0x28>)
 8001b96:	f043 0310 	orr.w	r3, r3, #16
 8001b9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 f923 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba2:	200f      	movs	r0, #15
 8001ba4:	f000 f808 	bl	8001bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba8:	f7ff feaa 	bl	8001900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x54>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x58>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f93b 	bl	8001e52 <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00e      	b.n	8001c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0f      	cmp	r3, #15
 8001bea:	d80a      	bhi.n	8001c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bec:	2200      	movs	r2, #0
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f000 f903 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <HAL_InitTick+0x5c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2000000c 	.word	0x2000000c
 8001c10:	20000014 	.word	0x20000014
 8001c14:	20000010 	.word	0x20000010

08001c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_IncTick+0x1c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_IncTick+0x20>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <HAL_IncTick+0x20>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	20000014 	.word	0x20000014
 8001c38:	20000250 	.word	0x20000250

08001c3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <HAL_GetTick+0x10>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	20000250 	.word	0x20000250

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4906      	ldr	r1, [pc, #24]	; (8001ce8 <__NVIC_EnableIRQ+0x34>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	; (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	; (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f1c3 0307 	rsb	r3, r3, #7
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	bf28      	it	cs
 8001d5e:	2304      	movcs	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d902      	bls.n	8001d70 <NVIC_EncodePriority+0x30>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3b03      	subs	r3, #3
 8001d6e:	e000      	b.n	8001d72 <NVIC_EncodePriority+0x32>
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	401a      	ands	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d88:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	43d9      	mvns	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4313      	orrs	r3, r2
         );
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff90 	bl	8001cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff2d 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff42 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff90 	bl	8001d40 <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5f 	bl	8001cec <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff35 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b085      	sub	sp, #20
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d008      	beq.n	8001e94 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2204      	movs	r2, #4
 8001e86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e020      	b.n	8001ed6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 020e 	bic.w	r2, r2, #14
 8001ea2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d005      	beq.n	8001f04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2204      	movs	r2, #4
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e051      	b.n	8001fa8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 020e 	bic.w	r2, r2, #14
 8001f12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <HAL_DMA_Abort_IT+0xd4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d029      	beq.n	8001f82 <HAL_DMA_Abort_IT+0xa2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <HAL_DMA_Abort_IT+0xd8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d022      	beq.n	8001f7e <HAL_DMA_Abort_IT+0x9e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <HAL_DMA_Abort_IT+0xdc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01a      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x98>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1e      	ldr	r2, [pc, #120]	; (8001fc0 <HAL_DMA_Abort_IT+0xe0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d012      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x92>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_DMA_Abort_IT+0xe4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00a      	beq.n	8001f6c <HAL_DMA_Abort_IT+0x8c>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <HAL_DMA_Abort_IT+0xe8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d102      	bne.n	8001f66 <HAL_DMA_Abort_IT+0x86>
 8001f60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f64:	e00e      	b.n	8001f84 <HAL_DMA_Abort_IT+0xa4>
 8001f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f6a:	e00b      	b.n	8001f84 <HAL_DMA_Abort_IT+0xa4>
 8001f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f70:	e008      	b.n	8001f84 <HAL_DMA_Abort_IT+0xa4>
 8001f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f76:	e005      	b.n	8001f84 <HAL_DMA_Abort_IT+0xa4>
 8001f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7c:	e002      	b.n	8001f84 <HAL_DMA_Abort_IT+0xa4>
 8001f7e:	2310      	movs	r3, #16
 8001f80:	e000      	b.n	8001f84 <HAL_DMA_Abort_IT+0xa4>
 8001f82:	2301      	movs	r3, #1
 8001f84:	4a11      	ldr	r2, [pc, #68]	; (8001fcc <HAL_DMA_Abort_IT+0xec>)
 8001f86:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
    } 
  }
  return status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40020008 	.word	0x40020008
 8001fb8:	4002001c 	.word	0x4002001c
 8001fbc:	40020030 	.word	0x40020030
 8001fc0:	40020044 	.word	0x40020044
 8001fc4:	40020058 	.word	0x40020058
 8001fc8:	4002006c 	.word	0x4002006c
 8001fcc:	40020000 	.word	0x40020000

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b08b      	sub	sp, #44	; 0x2c
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe2:	e161      	b.n	80022a8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	f040 8150 	bne.w	80022a2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4a97      	ldr	r2, [pc, #604]	; (8002264 <HAL_GPIO_Init+0x294>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d05e      	beq.n	80020ca <HAL_GPIO_Init+0xfa>
 800200c:	4a95      	ldr	r2, [pc, #596]	; (8002264 <HAL_GPIO_Init+0x294>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d875      	bhi.n	80020fe <HAL_GPIO_Init+0x12e>
 8002012:	4a95      	ldr	r2, [pc, #596]	; (8002268 <HAL_GPIO_Init+0x298>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d058      	beq.n	80020ca <HAL_GPIO_Init+0xfa>
 8002018:	4a93      	ldr	r2, [pc, #588]	; (8002268 <HAL_GPIO_Init+0x298>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d86f      	bhi.n	80020fe <HAL_GPIO_Init+0x12e>
 800201e:	4a93      	ldr	r2, [pc, #588]	; (800226c <HAL_GPIO_Init+0x29c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d052      	beq.n	80020ca <HAL_GPIO_Init+0xfa>
 8002024:	4a91      	ldr	r2, [pc, #580]	; (800226c <HAL_GPIO_Init+0x29c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d869      	bhi.n	80020fe <HAL_GPIO_Init+0x12e>
 800202a:	4a91      	ldr	r2, [pc, #580]	; (8002270 <HAL_GPIO_Init+0x2a0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d04c      	beq.n	80020ca <HAL_GPIO_Init+0xfa>
 8002030:	4a8f      	ldr	r2, [pc, #572]	; (8002270 <HAL_GPIO_Init+0x2a0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d863      	bhi.n	80020fe <HAL_GPIO_Init+0x12e>
 8002036:	4a8f      	ldr	r2, [pc, #572]	; (8002274 <HAL_GPIO_Init+0x2a4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d046      	beq.n	80020ca <HAL_GPIO_Init+0xfa>
 800203c:	4a8d      	ldr	r2, [pc, #564]	; (8002274 <HAL_GPIO_Init+0x2a4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d85d      	bhi.n	80020fe <HAL_GPIO_Init+0x12e>
 8002042:	2b12      	cmp	r3, #18
 8002044:	d82a      	bhi.n	800209c <HAL_GPIO_Init+0xcc>
 8002046:	2b12      	cmp	r3, #18
 8002048:	d859      	bhi.n	80020fe <HAL_GPIO_Init+0x12e>
 800204a:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <HAL_GPIO_Init+0x80>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	080020cb 	.word	0x080020cb
 8002054:	080020a5 	.word	0x080020a5
 8002058:	080020b7 	.word	0x080020b7
 800205c:	080020f9 	.word	0x080020f9
 8002060:	080020ff 	.word	0x080020ff
 8002064:	080020ff 	.word	0x080020ff
 8002068:	080020ff 	.word	0x080020ff
 800206c:	080020ff 	.word	0x080020ff
 8002070:	080020ff 	.word	0x080020ff
 8002074:	080020ff 	.word	0x080020ff
 8002078:	080020ff 	.word	0x080020ff
 800207c:	080020ff 	.word	0x080020ff
 8002080:	080020ff 	.word	0x080020ff
 8002084:	080020ff 	.word	0x080020ff
 8002088:	080020ff 	.word	0x080020ff
 800208c:	080020ff 	.word	0x080020ff
 8002090:	080020ff 	.word	0x080020ff
 8002094:	080020ad 	.word	0x080020ad
 8002098:	080020c1 	.word	0x080020c1
 800209c:	4a76      	ldr	r2, [pc, #472]	; (8002278 <HAL_GPIO_Init+0x2a8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020a2:	e02c      	b.n	80020fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	623b      	str	r3, [r7, #32]
          break;
 80020aa:	e029      	b.n	8002100 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	3304      	adds	r3, #4
 80020b2:	623b      	str	r3, [r7, #32]
          break;
 80020b4:	e024      	b.n	8002100 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	3308      	adds	r3, #8
 80020bc:	623b      	str	r3, [r7, #32]
          break;
 80020be:	e01f      	b.n	8002100 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	330c      	adds	r3, #12
 80020c6:	623b      	str	r3, [r7, #32]
          break;
 80020c8:	e01a      	b.n	8002100 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020d2:	2304      	movs	r3, #4
 80020d4:	623b      	str	r3, [r7, #32]
          break;
 80020d6:	e013      	b.n	8002100 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e0:	2308      	movs	r3, #8
 80020e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	611a      	str	r2, [r3, #16]
          break;
 80020ea:	e009      	b.n	8002100 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020ec:	2308      	movs	r3, #8
 80020ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	615a      	str	r2, [r3, #20]
          break;
 80020f6:	e003      	b.n	8002100 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
          break;
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_Init+0x130>
          break;
 80020fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2bff      	cmp	r3, #255	; 0xff
 8002104:	d801      	bhi.n	800210a <HAL_GPIO_Init+0x13a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	e001      	b.n	800210e <HAL_GPIO_Init+0x13e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2bff      	cmp	r3, #255	; 0xff
 8002114:	d802      	bhi.n	800211c <HAL_GPIO_Init+0x14c>
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	e002      	b.n	8002122 <HAL_GPIO_Init+0x152>
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	3b08      	subs	r3, #8
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	210f      	movs	r1, #15
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	401a      	ands	r2, r3
 8002134:	6a39      	ldr	r1, [r7, #32]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	431a      	orrs	r2, r3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 80a9 	beq.w	80022a2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002150:	4b4a      	ldr	r3, [pc, #296]	; (800227c <HAL_GPIO_Init+0x2ac>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	4a49      	ldr	r2, [pc, #292]	; (800227c <HAL_GPIO_Init+0x2ac>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6193      	str	r3, [r2, #24]
 800215c:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_GPIO_Init+0x2ac>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002168:	4a45      	ldr	r2, [pc, #276]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002174:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	220f      	movs	r2, #15
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a3d      	ldr	r2, [pc, #244]	; (8002284 <HAL_GPIO_Init+0x2b4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d00d      	beq.n	80021b0 <HAL_GPIO_Init+0x1e0>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a3c      	ldr	r2, [pc, #240]	; (8002288 <HAL_GPIO_Init+0x2b8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d007      	beq.n	80021ac <HAL_GPIO_Init+0x1dc>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a3b      	ldr	r2, [pc, #236]	; (800228c <HAL_GPIO_Init+0x2bc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d101      	bne.n	80021a8 <HAL_GPIO_Init+0x1d8>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e004      	b.n	80021b2 <HAL_GPIO_Init+0x1e2>
 80021a8:	2303      	movs	r3, #3
 80021aa:	e002      	b.n	80021b2 <HAL_GPIO_Init+0x1e2>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_GPIO_Init+0x1e2>
 80021b0:	2300      	movs	r3, #0
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	f002 0203 	and.w	r2, r2, #3
 80021b8:	0092      	lsls	r2, r2, #2
 80021ba:	4093      	lsls	r3, r2
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021c2:	492f      	ldr	r1, [pc, #188]	; (8002280 <HAL_GPIO_Init+0x2b0>)
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	3302      	adds	r3, #2
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021dc:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	492b      	ldr	r1, [pc, #172]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ea:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	4927      	ldr	r1, [pc, #156]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d006      	beq.n	8002212 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	4921      	ldr	r1, [pc, #132]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	60cb      	str	r3, [r1, #12]
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	43db      	mvns	r3, r3
 800221a:	491d      	ldr	r1, [pc, #116]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 800221c:	4013      	ands	r3, r2
 800221e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d006      	beq.n	800223a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	4917      	ldr	r1, [pc, #92]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	43db      	mvns	r3, r3
 8002242:	4913      	ldr	r1, [pc, #76]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 8002244:	4013      	ands	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01f      	beq.n	8002294 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	490d      	ldr	r1, [pc, #52]	; (8002290 <HAL_GPIO_Init+0x2c0>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
 8002260:	e01f      	b.n	80022a2 <HAL_GPIO_Init+0x2d2>
 8002262:	bf00      	nop
 8002264:	10320000 	.word	0x10320000
 8002268:	10310000 	.word	0x10310000
 800226c:	10220000 	.word	0x10220000
 8002270:	10210000 	.word	0x10210000
 8002274:	10120000 	.word	0x10120000
 8002278:	10110000 	.word	0x10110000
 800227c:	40021000 	.word	0x40021000
 8002280:	40010000 	.word	0x40010000
 8002284:	40010800 	.word	0x40010800
 8002288:	40010c00 	.word	0x40010c00
 800228c:	40011000 	.word	0x40011000
 8002290:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_GPIO_Init+0x2f4>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	43db      	mvns	r3, r3
 800229c:	4909      	ldr	r1, [pc, #36]	; (80022c4 <HAL_GPIO_Init+0x2f4>)
 800229e:	4013      	ands	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	3301      	adds	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f47f ae96 	bne.w	8001fe4 <HAL_GPIO_Init+0x14>
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	372c      	adds	r7, #44	; 0x2c
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	40010400 	.word	0x40010400

080022c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
 80022d4:	4613      	mov	r3, r2
 80022d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022d8:	787b      	ldrb	r3, [r7, #1]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022e4:	e003      	b.n	80022ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	611a      	str	r2, [r3, #16]
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4013      	ands	r3, r2
 8002310:	041a      	lsls	r2, r3, #16
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43d9      	mvns	r1, r3
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	400b      	ands	r3, r1
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	611a      	str	r2, [r3, #16]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
	...

0800232c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e272      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8087 	beq.w	800245a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800234c:	4b92      	ldr	r3, [pc, #584]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b04      	cmp	r3, #4
 8002356:	d00c      	beq.n	8002372 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002358:	4b8f      	ldr	r3, [pc, #572]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d112      	bne.n	800238a <HAL_RCC_OscConfig+0x5e>
 8002364:	4b8c      	ldr	r3, [pc, #560]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d10b      	bne.n	800238a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002372:	4b89      	ldr	r3, [pc, #548]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d06c      	beq.n	8002458 <HAL_RCC_OscConfig+0x12c>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d168      	bne.n	8002458 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e24c      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x76>
 8002394:	4b80      	ldr	r3, [pc, #512]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a7f      	ldr	r2, [pc, #508]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 800239a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	e02e      	b.n	8002400 <HAL_RCC_OscConfig+0xd4>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x98>
 80023aa:	4b7b      	ldr	r3, [pc, #492]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7a      	ldr	r2, [pc, #488]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b78      	ldr	r3, [pc, #480]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a77      	ldr	r2, [pc, #476]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e01d      	b.n	8002400 <HAL_RCC_OscConfig+0xd4>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0xbc>
 80023ce:	4b72      	ldr	r3, [pc, #456]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a71      	ldr	r2, [pc, #452]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b6f      	ldr	r3, [pc, #444]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a6e      	ldr	r2, [pc, #440]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0xd4>
 80023e8:	4b6b      	ldr	r3, [pc, #428]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a6a      	ldr	r2, [pc, #424]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b68      	ldr	r3, [pc, #416]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a67      	ldr	r2, [pc, #412]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d013      	beq.n	8002430 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7ff fc18 	bl	8001c3c <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff fc14 	bl	8001c3c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e200      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b5d      	ldr	r3, [pc, #372]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0xe4>
 800242e:	e014      	b.n	800245a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7ff fc04 	bl	8001c3c <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff fc00 	bl	8001c3c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e1ec      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x10c>
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d063      	beq.n	800252e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002466:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002472:	4b49      	ldr	r3, [pc, #292]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b08      	cmp	r3, #8
 800247c:	d11c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x18c>
 800247e:	4b46      	ldr	r3, [pc, #280]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d116      	bne.n	80024b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	4b43      	ldr	r3, [pc, #268]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_RCC_OscConfig+0x176>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e1c0      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4939      	ldr	r1, [pc, #228]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b6:	e03a      	b.n	800252e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c0:	4b36      	ldr	r3, [pc, #216]	; (800259c <HAL_RCC_OscConfig+0x270>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7ff fbb9 	bl	8001c3c <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ce:	f7ff fbb5 	bl	8001c3c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e1a1      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4927      	ldr	r1, [pc, #156]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	600b      	str	r3, [r1, #0]
 8002500:	e015      	b.n	800252e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002502:	4b26      	ldr	r3, [pc, #152]	; (800259c <HAL_RCC_OscConfig+0x270>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff fb98 	bl	8001c3c <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002510:	f7ff fb94 	bl	8001c3c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e180      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d03a      	beq.n	80025b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d019      	beq.n	8002576 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002542:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <HAL_RCC_OscConfig+0x274>)
 8002544:	2201      	movs	r2, #1
 8002546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002548:	f7ff fb78 	bl	8001c3c <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002550:	f7ff fb74 	bl	8001c3c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e160      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_RCC_OscConfig+0x26c>)
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800256e:	2001      	movs	r0, #1
 8002570:	f000 face 	bl	8002b10 <RCC_Delay>
 8002574:	e01c      	b.n	80025b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_RCC_OscConfig+0x274>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257c:	f7ff fb5e 	bl	8001c3c <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002582:	e00f      	b.n	80025a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002584:	f7ff fb5a 	bl	8001c3c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d908      	bls.n	80025a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e146      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	42420000 	.word	0x42420000
 80025a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a4:	4b92      	ldr	r3, [pc, #584]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e9      	bne.n	8002584 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80a6 	beq.w	800270a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c2:	4b8b      	ldr	r3, [pc, #556]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4b88      	ldr	r3, [pc, #544]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	4a87      	ldr	r2, [pc, #540]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	61d3      	str	r3, [r2, #28]
 80025da:	4b85      	ldr	r3, [pc, #532]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e6:	2301      	movs	r3, #1
 80025e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	4b82      	ldr	r3, [pc, #520]	; (80027f4 <HAL_RCC_OscConfig+0x4c8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f6:	4b7f      	ldr	r3, [pc, #508]	; (80027f4 <HAL_RCC_OscConfig+0x4c8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a7e      	ldr	r2, [pc, #504]	; (80027f4 <HAL_RCC_OscConfig+0x4c8>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002602:	f7ff fb1b 	bl	8001c3c <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7ff fb17 	bl	8001c3c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b64      	cmp	r3, #100	; 0x64
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e103      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	4b75      	ldr	r3, [pc, #468]	; (80027f4 <HAL_RCC_OscConfig+0x4c8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x312>
 8002630:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a6e      	ldr	r2, [pc, #440]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6213      	str	r3, [r2, #32]
 800263c:	e02d      	b.n	800269a <HAL_RCC_OscConfig+0x36e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x334>
 8002646:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4a69      	ldr	r2, [pc, #420]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	6213      	str	r3, [r2, #32]
 8002652:	4b67      	ldr	r3, [pc, #412]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	4a66      	ldr	r2, [pc, #408]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	f023 0304 	bic.w	r3, r3, #4
 800265c:	6213      	str	r3, [r2, #32]
 800265e:	e01c      	b.n	800269a <HAL_RCC_OscConfig+0x36e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2b05      	cmp	r3, #5
 8002666:	d10c      	bne.n	8002682 <HAL_RCC_OscConfig+0x356>
 8002668:	4b61      	ldr	r3, [pc, #388]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4a60      	ldr	r2, [pc, #384]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	6213      	str	r3, [r2, #32]
 8002674:	4b5e      	ldr	r3, [pc, #376]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4a5d      	ldr	r2, [pc, #372]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6213      	str	r3, [r2, #32]
 8002680:	e00b      	b.n	800269a <HAL_RCC_OscConfig+0x36e>
 8002682:	4b5b      	ldr	r3, [pc, #364]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4a5a      	ldr	r2, [pc, #360]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	6213      	str	r3, [r2, #32]
 800268e:	4b58      	ldr	r3, [pc, #352]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4a57      	ldr	r2, [pc, #348]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d015      	beq.n	80026ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7ff facb 	bl	8001c3c <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7ff fac7 	bl	8001c3c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0b1      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c0:	4b4b      	ldr	r3, [pc, #300]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0ee      	beq.n	80026aa <HAL_RCC_OscConfig+0x37e>
 80026cc:	e014      	b.n	80026f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7ff fab5 	bl	8001c3c <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d4:	e00a      	b.n	80026ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7ff fab1 	bl	8001c3c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e09b      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ec:	4b40      	ldr	r3, [pc, #256]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1ee      	bne.n	80026d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d105      	bne.n	800270a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fe:	4b3c      	ldr	r3, [pc, #240]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4a3b      	ldr	r2, [pc, #236]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002708:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8087 	beq.w	8002822 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b08      	cmp	r3, #8
 800271e:	d061      	beq.n	80027e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d146      	bne.n	80027b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002728:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <HAL_RCC_OscConfig+0x4cc>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7ff fa85 	bl	8001c3c <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002736:	f7ff fa81 	bl	8001c3c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e06d      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f0      	bne.n	8002736 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275c:	d108      	bne.n	8002770 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	4921      	ldr	r1, [pc, #132]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a19      	ldr	r1, [r3, #32]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	430b      	orrs	r3, r1
 8002782:	491b      	ldr	r1, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_RCC_OscConfig+0x4cc>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7ff fa55 	bl	8001c3c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7ff fa51 	bl	8001c3c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e03d      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x46a>
 80027b4:	e035      	b.n	8002822 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_RCC_OscConfig+0x4cc>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7ff fa3e 	bl	8001c3c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c4:	f7ff fa3a 	bl	8001c3c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e026      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x498>
 80027e2:	e01e      	b.n	8002822 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e019      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40007000 	.word	0x40007000
 80027f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_OscConfig+0x500>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	429a      	cmp	r2, r3
 800280e:	d106      	bne.n	800281e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d001      	beq.n	8002822 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000

08002830 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0d0      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002844:	4b6a      	ldr	r3, [pc, #424]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d910      	bls.n	8002874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b67      	ldr	r3, [pc, #412]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 0207 	bic.w	r2, r3, #7
 800285a:	4965      	ldr	r1, [pc, #404]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0b8      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d020      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800288c:	4b59      	ldr	r3, [pc, #356]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4a58      	ldr	r2, [pc, #352]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002896:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a4:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b0:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	494d      	ldr	r1, [pc, #308]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d040      	beq.n	8002950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d115      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e07f      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ee:	4b41      	ldr	r3, [pc, #260]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e073      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fe:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e06b      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290e:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f023 0203 	bic.w	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4936      	ldr	r1, [pc, #216]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002920:	f7ff f98c 	bl	8001c3c <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	e00a      	b.n	800293e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002928:	f7ff f988 	bl	8001c3c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	; 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e053      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 020c 	and.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	429a      	cmp	r2, r3
 800294e:	d1eb      	bne.n	8002928 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002950:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d210      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 0207 	bic.w	r2, r3, #7
 8002966:	4922      	ldr	r1, [pc, #136]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e032      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4916      	ldr	r1, [pc, #88]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	490e      	ldr	r1, [pc, #56]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029be:	f000 f821 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80029c2:	4602      	mov	r2, r0
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	490a      	ldr	r1, [pc, #40]	; (80029f8 <HAL_RCC_ClockConfig+0x1c8>)
 80029d0:	5ccb      	ldrb	r3, [r1, r3]
 80029d2:	fa22 f303 	lsr.w	r3, r2, r3
 80029d6:	4a09      	ldr	r2, [pc, #36]	; (80029fc <HAL_RCC_ClockConfig+0x1cc>)
 80029d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_ClockConfig+0x1d0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff f8ea 	bl	8001bb8 <HAL_InitTick>

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40021000 	.word	0x40021000
 80029f8:	080048fc 	.word	0x080048fc
 80029fc:	2000000c 	.word	0x2000000c
 8002a00:	20000010 	.word	0x20000010

08002a04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d002      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x30>
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x36>
 8002a32:	e027      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a36:	613b      	str	r3, [r7, #16]
      break;
 8002a38:	e027      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	0c9b      	lsrs	r3, r3, #18
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	4a17      	ldr	r2, [pc, #92]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a44:	5cd3      	ldrb	r3, [r2, r3]
 8002a46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d010      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0c5b      	lsrs	r3, r3, #17
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a66:	fb03 f202 	mul.w	r2, r3, r2
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	e004      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a0c      	ldr	r2, [pc, #48]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a78:	fb02 f303 	mul.w	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	613b      	str	r3, [r7, #16]
      break;
 8002a82:	e002      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a86:	613b      	str	r3, [r7, #16]
      break;
 8002a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8a:	693b      	ldr	r3, [r7, #16]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	007a1200 	.word	0x007a1200
 8002aa0:	08004914 	.word	0x08004914
 8002aa4:	08004924 	.word	0x08004924
 8002aa8:	003d0900 	.word	0x003d0900

08002aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab0:	4b02      	ldr	r3, [pc, #8]	; (8002abc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	2000000c 	.word	0x2000000c

08002ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ac4:	f7ff fff2 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	; (8002ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	0800490c 	.word	0x0800490c

08002ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aec:	f7ff ffde 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	0adb      	lsrs	r3, r3, #11
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	0800490c 	.word	0x0800490c

08002b10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <RCC_Delay+0x34>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <RCC_Delay+0x38>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0a5b      	lsrs	r3, r3, #9
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b2c:	bf00      	nop
  }
  while (Delay --);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1e5a      	subs	r2, r3, #1
 8002b32:	60fa      	str	r2, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f9      	bne.n	8002b2c <RCC_Delay+0x1c>
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	2000000c 	.word	0x2000000c
 8002b48:	10624dd3 	.word	0x10624dd3

08002b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e041      	b.n	8002be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe fef6 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3304      	adds	r3, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f000 fa6e 	bl	800306c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d001      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e035      	b.n	8002c70 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a16      	ldr	r2, [pc, #88]	; (8002c7c <HAL_TIM_Base_Start_IT+0x90>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d009      	beq.n	8002c3a <HAL_TIM_Base_Start_IT+0x4e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2e:	d004      	beq.n	8002c3a <HAL_TIM_Base_Start_IT+0x4e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <HAL_TIM_Base_Start_IT+0x94>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d111      	bne.n	8002c5e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b06      	cmp	r3, #6
 8002c4a:	d010      	beq.n	8002c6e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c5c:	e007      	b.n	8002c6e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40000400 	.word	0x40000400

08002c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d122      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0202 	mvn.w	r2, #2
 8002cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f9b4 	bl	8003034 <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f9a7 	bl	8003022 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f9b6 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d122      	bne.n	8002d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d11b      	bne.n	8002d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0204 	mvn.w	r2, #4
 8002d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f98a 	bl	8003034 <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f97d 	bl	8003022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f98c 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d122      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d11b      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0208 	mvn.w	r2, #8
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f960 	bl	8003034 <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f953 	bl	8003022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f962 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d122      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d11b      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0210 	mvn.w	r2, #16
 8002dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2208      	movs	r2, #8
 8002db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f936 	bl	8003034 <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f929 	bl	8003022 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f938 	bl	8003046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d10e      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d107      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0201 	mvn.w	r2, #1
 8002e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe f9d6 	bl	80011b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b80      	cmp	r3, #128	; 0x80
 8002e14:	d10e      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e20:	2b80      	cmp	r3, #128	; 0x80
 8002e22:	d107      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 fa6b 	bl	800330a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d10e      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d107      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f8fc 	bl	8003058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d10e      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d107      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0220 	mvn.w	r2, #32
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fa36 	bl	80032f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e0b4      	b.n	800301a <HAL_TIM_ConfigClockSource+0x186>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee8:	d03e      	beq.n	8002f68 <HAL_TIM_ConfigClockSource+0xd4>
 8002eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eee:	f200 8087 	bhi.w	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef6:	f000 8086 	beq.w	8003006 <HAL_TIM_ConfigClockSource+0x172>
 8002efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efe:	d87f      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b70      	cmp	r3, #112	; 0x70
 8002f02:	d01a      	beq.n	8002f3a <HAL_TIM_ConfigClockSource+0xa6>
 8002f04:	2b70      	cmp	r3, #112	; 0x70
 8002f06:	d87b      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b60      	cmp	r3, #96	; 0x60
 8002f0a:	d050      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0x11a>
 8002f0c:	2b60      	cmp	r3, #96	; 0x60
 8002f0e:	d877      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f10:	2b50      	cmp	r3, #80	; 0x50
 8002f12:	d03c      	beq.n	8002f8e <HAL_TIM_ConfigClockSource+0xfa>
 8002f14:	2b50      	cmp	r3, #80	; 0x50
 8002f16:	d873      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	d058      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0x13a>
 8002f1c:	2b40      	cmp	r3, #64	; 0x40
 8002f1e:	d86f      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f20:	2b30      	cmp	r3, #48	; 0x30
 8002f22:	d064      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f24:	2b30      	cmp	r3, #48	; 0x30
 8002f26:	d86b      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d060      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d867      	bhi.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d05c      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d05a      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x15a>
 8002f38:	e062      	b.n	8003000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f4a:	f000 f95e 	bl	800320a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	609a      	str	r2, [r3, #8]
      break;
 8002f66:	e04f      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f78:	f000 f947 	bl	800320a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f8a:	609a      	str	r2, [r3, #8]
      break;
 8002f8c:	e03c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f000 f8be 	bl	800311c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2150      	movs	r1, #80	; 0x50
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f915 	bl	80031d6 <TIM_ITRx_SetConfig>
      break;
 8002fac:	e02c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f000 f8dc 	bl	8003178 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2160      	movs	r1, #96	; 0x60
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f905 	bl	80031d6 <TIM_ITRx_SetConfig>
      break;
 8002fcc:	e01c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f000 f89e 	bl	800311c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2140      	movs	r1, #64	; 0x40
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f8f5 	bl	80031d6 <TIM_ITRx_SetConfig>
      break;
 8002fec:	e00c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f000 f8ec 	bl	80031d6 <TIM_ITRx_SetConfig>
      break;
 8002ffe:	e003      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e000      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
	...

0800306c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a25      	ldr	r2, [pc, #148]	; (8003114 <TIM_Base_SetConfig+0xa8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d007      	beq.n	8003094 <TIM_Base_SetConfig+0x28>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308a:	d003      	beq.n	8003094 <TIM_Base_SetConfig+0x28>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a22      	ldr	r2, [pc, #136]	; (8003118 <TIM_Base_SetConfig+0xac>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d108      	bne.n	80030a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <TIM_Base_SetConfig+0xa8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d007      	beq.n	80030be <TIM_Base_SetConfig+0x52>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b4:	d003      	beq.n	80030be <TIM_Base_SetConfig+0x52>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a17      	ldr	r2, [pc, #92]	; (8003118 <TIM_Base_SetConfig+0xac>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d108      	bne.n	80030d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a07      	ldr	r2, [pc, #28]	; (8003114 <TIM_Base_SetConfig+0xa8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d103      	bne.n	8003104 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	615a      	str	r2, [r3, #20]
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr
 8003114:	40012c00 	.word	0x40012c00
 8003118:	40000400 	.word	0x40000400

0800311c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f023 0201 	bic.w	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f023 030a 	bic.w	r3, r3, #10
 8003158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	621a      	str	r2, [r3, #32]
}
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f023 0210 	bic.w	r2, r3, #16
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	031b      	lsls	r3, r3, #12
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	621a      	str	r2, [r3, #32]
}
 80031cc:	bf00      	nop
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f043 0307 	orr.w	r3, r3, #7
 80031f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	609a      	str	r2, [r3, #8]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800320a:	b480      	push	{r7}
 800320c:	b087      	sub	sp, #28
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003224:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	021a      	lsls	r2, r3, #8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	431a      	orrs	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4313      	orrs	r3, r2
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	609a      	str	r2, [r3, #8]
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800325c:	2302      	movs	r3, #2
 800325e:	e041      	b.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d009      	beq.n	80032b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ac:	d004      	beq.n	80032b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a10      	ldr	r2, [pc, #64]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d10c      	bne.n	80032d2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40000400 	.word	0x40000400

080032f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e042      	b.n	80033b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fe fb32 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2224      	movs	r2, #36	; 0x24
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800335e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fd71 	bl	8003e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d16d      	bne.n	80034b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_UART_Transmit+0x2c>
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e066      	b.n	80034ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2221      	movs	r2, #33	; 0x21
 80033f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033fa:	f7fe fc1f 	bl	8001c3c <HAL_GetTick>
 80033fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	88fa      	ldrh	r2, [r7, #6]
 8003404:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003414:	d108      	bne.n	8003428 <HAL_UART_Transmit+0x6c>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	e003      	b.n	8003430 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003430:	e02a      	b.n	8003488 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 faf9 	bl	8003a34 <UART_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e036      	b.n	80034ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003460:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	3302      	adds	r3, #2
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	e007      	b.n	800347a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	3301      	adds	r3, #1
 8003478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1cf      	bne.n	8003432 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2200      	movs	r2, #0
 800349a:	2140      	movs	r1, #64	; 0x40
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fac9 	bl	8003a34 <UART_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e006      	b.n	80034ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b0ba      	sub	sp, #232	; 0xe8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10f      	bne.n	800352a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800350a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_UART_IRQHandler+0x66>
 8003516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fbd1 	bl	8003cca <UART_Receive_IT>
      return;
 8003528:	e25b      	b.n	80039e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800352a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80de 	beq.w	80036f0 <HAL_UART_IRQHandler+0x22c>
 8003534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d106      	bne.n	800354e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003544:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80d1 	beq.w	80036f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <HAL_UART_IRQHandler+0xae>
 800355a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_UART_IRQHandler+0xd2>
 800357e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <HAL_UART_IRQHandler+0xf6>
 80035a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f043 0204 	orr.w	r2, r3, #4
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d011      	beq.n	80035ea <HAL_UART_IRQHandler+0x126>
 80035c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d105      	bne.n	80035de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f043 0208 	orr.w	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 81f2 	beq.w	80039d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_UART_IRQHandler+0x14e>
 8003600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb5c 	bl	8003cca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_UART_IRQHandler+0x17a>
 8003636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d04f      	beq.n	80036de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa66 	bl	8003b10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d041      	beq.n	80036d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3314      	adds	r3, #20
 8003658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800366c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800367e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800368a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003696:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1d9      	bne.n	8003652 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d013      	beq.n	80036ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	4a7e      	ldr	r2, [pc, #504]	; (80038a4 <HAL_UART_IRQHandler+0x3e0>)
 80036ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe fc14 	bl	8001ee0 <HAL_DMA_Abort_IT>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d016      	beq.n	80036ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036c8:	4610      	mov	r0, r2
 80036ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036cc:	e00e      	b.n	80036ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f99c 	bl	8003a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d4:	e00a      	b.n	80036ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f998 	bl	8003a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	e006      	b.n	80036ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f994 	bl	8003a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80036ea:	e175      	b.n	80039d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	bf00      	nop
    return;
 80036ee:	e173      	b.n	80039d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f040 814f 	bne.w	8003998 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 8148 	beq.w	8003998 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8141 	beq.w	8003998 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80b6 	beq.w	80038a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003748:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8145 	beq.w	80039dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800375a:	429a      	cmp	r2, r3
 800375c:	f080 813e 	bcs.w	80039dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003766:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b20      	cmp	r3, #32
 8003770:	f000 8088 	beq.w	8003884 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800378a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800378e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003792:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037b0:	e841 2300 	strex	r3, r2, [r1]
 80037b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1d9      	bne.n	8003774 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3314      	adds	r3, #20
 80037c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3314      	adds	r3, #20
 80037e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e1      	bne.n	80037c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3314      	adds	r3, #20
 8003802:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800380c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3314      	adds	r3, #20
 800381c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003820:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003822:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003826:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800382e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e3      	bne.n	80037fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003854:	f023 0310 	bic.w	r3, r3, #16
 8003858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003866:	65ba      	str	r2, [r7, #88]	; 0x58
 8003868:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800386c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e3      	bne.n	8003842 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe faf3 	bl	8001e6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003892:	b29b      	uxth	r3, r3
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	b29b      	uxth	r3, r3
 8003898:	4619      	mov	r1, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f8bf 	bl	8003a1e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038a0:	e09c      	b.n	80039dc <HAL_UART_IRQHandler+0x518>
 80038a2:	bf00      	nop
 80038a4:	08003bd5 	.word	0x08003bd5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 808e 	beq.w	80039e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80038c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8089 	beq.w	80039e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038f2:	647a      	str	r2, [r7, #68]	; 0x44
 80038f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e3      	bne.n	80038ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3314      	adds	r3, #20
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	623b      	str	r3, [r7, #32]
   return(result);
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3314      	adds	r3, #20
 8003926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800392a:	633a      	str	r2, [r7, #48]	; 0x30
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e3      	bne.n	8003906 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	60fb      	str	r3, [r7, #12]
   return(result);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0310 	bic.w	r3, r3, #16
 8003962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003970:	61fa      	str	r2, [r7, #28]
 8003972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	69b9      	ldr	r1, [r7, #24]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	617b      	str	r3, [r7, #20]
   return(result);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e3      	bne.n	800394c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800398a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800398e:	4619      	mov	r1, r3
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f844 	bl	8003a1e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003996:	e023      	b.n	80039e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d009      	beq.n	80039b8 <HAL_UART_IRQHandler+0x4f4>
 80039a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f923 	bl	8003bfc <UART_Transmit_IT>
    return;
 80039b6:	e014      	b.n	80039e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <HAL_UART_IRQHandler+0x51e>
 80039c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f962 	bl	8003c9a <UART_EndTransmit_IT>
    return;
 80039d6:	e004      	b.n	80039e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80039d8:	bf00      	nop
 80039da:	e002      	b.n	80039e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80039dc:	bf00      	nop
 80039de:	e000      	b.n	80039e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80039e0:	bf00      	nop
  }
}
 80039e2:	37e8      	adds	r7, #232	; 0xe8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr

080039fa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b090      	sub	sp, #64	; 0x40
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a44:	e050      	b.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d04c      	beq.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d007      	beq.n	8003a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a54:	f7fe f8f2 	bl	8001c3c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d241      	bcs.n	8003ae8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	330c      	adds	r3, #12
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a84:	637a      	str	r2, [r7, #52]	; 0x34
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3314      	adds	r3, #20
 8003a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3314      	adds	r3, #20
 8003ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ab8:	623a      	str	r2, [r7, #32]
 8003aba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	69f9      	ldr	r1, [r7, #28]
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e5      	bne.n	8003a98 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e00f      	b.n	8003b08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4013      	ands	r3, r2
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d09f      	beq.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3740      	adds	r7, #64	; 0x40
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b095      	sub	sp, #84	; 0x54
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b38:	643a      	str	r2, [r7, #64]	; 0x40
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e5      	bne.n	8003b18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3314      	adds	r3, #20
 8003b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e5      	bne.n	8003b4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d119      	bne.n	8003bbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f023 0310 	bic.w	r3, r3, #16
 8003b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ba8:	61ba      	str	r2, [r7, #24]
 8003baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6979      	ldr	r1, [r7, #20]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e5      	bne.n	8003b88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bca:	bf00      	nop
 8003bcc:	3754      	adds	r7, #84	; 0x54
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff ff0c 	bl	8003a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b21      	cmp	r3, #33	; 0x21
 8003c0e:	d13e      	bne.n	8003c8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c18:	d114      	bne.n	8003c44 <UART_Transmit_IT+0x48>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d110      	bne.n	8003c44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	1c9a      	adds	r2, r3, #2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	621a      	str	r2, [r3, #32]
 8003c42:	e008      	b.n	8003c56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	1c59      	adds	r1, r3, #1
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6211      	str	r1, [r2, #32]
 8003c4e:	781a      	ldrb	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4619      	mov	r1, r3
 8003c64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10f      	bne.n	8003c8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e000      	b.n	8003c90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
  }
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fe94 	bl	80039e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b08c      	sub	sp, #48	; 0x30
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b22      	cmp	r3, #34	; 0x22
 8003cdc:	f040 80ae 	bne.w	8003e3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce8:	d117      	bne.n	8003d1a <UART_Receive_IT+0x50>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d113      	bne.n	8003d1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	1c9a      	adds	r2, r3, #2
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	629a      	str	r2, [r3, #40]	; 0x28
 8003d18:	e026      	b.n	8003d68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2c:	d007      	beq.n	8003d3e <UART_Receive_IT+0x74>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10a      	bne.n	8003d4c <UART_Receive_IT+0x82>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	e008      	b.n	8003d5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4619      	mov	r1, r3
 8003d76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d15d      	bne.n	8003e38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0220 	bic.w	r2, r2, #32
 8003d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d135      	bne.n	8003e2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	e853 3f00 	ldrex	r3, [r3]
 8003dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f023 0310 	bic.w	r3, r3, #16
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	623a      	str	r2, [r7, #32]
 8003dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dec:	69f9      	ldr	r1, [r7, #28]
 8003dee:	6a3a      	ldr	r2, [r7, #32]
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e5      	bne.n	8003dc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d10a      	bne.n	8003e20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff fdf9 	bl	8003a1e <HAL_UARTEx_RxEventCallback>
 8003e2c:	e002      	b.n	8003e34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fde3 	bl	80039fa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	e002      	b.n	8003e3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e000      	b.n	8003e3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
  }
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3730      	adds	r7, #48	; 0x30
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e82:	f023 030c 	bic.w	r3, r3, #12
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2c      	ldr	r2, [pc, #176]	; (8003f5c <UART_SetConfig+0x114>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d103      	bne.n	8003eb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003eb0:	f7fe fe1a 	bl	8002ae8 <HAL_RCC_GetPCLK2Freq>
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	e002      	b.n	8003ebe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7fe fe02 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8003ebc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009a      	lsls	r2, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	4a22      	ldr	r2, [pc, #136]	; (8003f60 <UART_SetConfig+0x118>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	0119      	lsls	r1, r3, #4
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009a      	lsls	r2, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <UART_SetConfig+0x118>)
 8003ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2064      	movs	r0, #100	; 0x64
 8003efe:	fb00 f303 	mul.w	r3, r0, r3
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	3332      	adds	r3, #50	; 0x32
 8003f08:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <UART_SetConfig+0x118>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f14:	4419      	add	r1, r3
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009a      	lsls	r2, r3, #2
 8003f20:	441a      	add	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <UART_SetConfig+0x118>)
 8003f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2064      	movs	r0, #100	; 0x64
 8003f36:	fb00 f303 	mul.w	r3, r0, r3
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	3332      	adds	r3, #50	; 0x32
 8003f40:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <UART_SetConfig+0x118>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	440a      	add	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40013800 	.word	0x40013800
 8003f60:	51eb851f 	.word	0x51eb851f

08003f64 <siprintf>:
 8003f64:	b40e      	push	{r1, r2, r3}
 8003f66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f6a:	b500      	push	{lr}
 8003f6c:	b09c      	sub	sp, #112	; 0x70
 8003f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f70:	9002      	str	r0, [sp, #8]
 8003f72:	9006      	str	r0, [sp, #24]
 8003f74:	9107      	str	r1, [sp, #28]
 8003f76:	9104      	str	r1, [sp, #16]
 8003f78:	4808      	ldr	r0, [pc, #32]	; (8003f9c <siprintf+0x38>)
 8003f7a:	4909      	ldr	r1, [pc, #36]	; (8003fa0 <siprintf+0x3c>)
 8003f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f80:	9105      	str	r1, [sp, #20]
 8003f82:	6800      	ldr	r0, [r0, #0]
 8003f84:	a902      	add	r1, sp, #8
 8003f86:	9301      	str	r3, [sp, #4]
 8003f88:	f000 f98e 	bl	80042a8 <_svfiprintf_r>
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	9b02      	ldr	r3, [sp, #8]
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	b01c      	add	sp, #112	; 0x70
 8003f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f98:	b003      	add	sp, #12
 8003f9a:	4770      	bx	lr
 8003f9c:	20000064 	.word	0x20000064
 8003fa0:	ffff0208 	.word	0xffff0208

08003fa4 <memset>:
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	4402      	add	r2, r0
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d100      	bne.n	8003fae <memset+0xa>
 8003fac:	4770      	bx	lr
 8003fae:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb2:	e7f9      	b.n	8003fa8 <memset+0x4>

08003fb4 <__errno>:
 8003fb4:	4b01      	ldr	r3, [pc, #4]	; (8003fbc <__errno+0x8>)
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000064 	.word	0x20000064

08003fc0 <__libc_init_array>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	2600      	movs	r6, #0
 8003fc4:	4d0c      	ldr	r5, [pc, #48]	; (8003ff8 <__libc_init_array+0x38>)
 8003fc6:	4c0d      	ldr	r4, [pc, #52]	; (8003ffc <__libc_init_array+0x3c>)
 8003fc8:	1b64      	subs	r4, r4, r5
 8003fca:	10a4      	asrs	r4, r4, #2
 8003fcc:	42a6      	cmp	r6, r4
 8003fce:	d109      	bne.n	8003fe4 <__libc_init_array+0x24>
 8003fd0:	f000 fc7a 	bl	80048c8 <_init>
 8003fd4:	2600      	movs	r6, #0
 8003fd6:	4d0a      	ldr	r5, [pc, #40]	; (8004000 <__libc_init_array+0x40>)
 8003fd8:	4c0a      	ldr	r4, [pc, #40]	; (8004004 <__libc_init_array+0x44>)
 8003fda:	1b64      	subs	r4, r4, r5
 8003fdc:	10a4      	asrs	r4, r4, #2
 8003fde:	42a6      	cmp	r6, r4
 8003fe0:	d105      	bne.n	8003fee <__libc_init_array+0x2e>
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe8:	4798      	blx	r3
 8003fea:	3601      	adds	r6, #1
 8003fec:	e7ee      	b.n	8003fcc <__libc_init_array+0xc>
 8003fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff2:	4798      	blx	r3
 8003ff4:	3601      	adds	r6, #1
 8003ff6:	e7f2      	b.n	8003fde <__libc_init_array+0x1e>
 8003ff8:	0800495c 	.word	0x0800495c
 8003ffc:	0800495c 	.word	0x0800495c
 8004000:	0800495c 	.word	0x0800495c
 8004004:	08004960 	.word	0x08004960

08004008 <__retarget_lock_acquire_recursive>:
 8004008:	4770      	bx	lr

0800400a <__retarget_lock_release_recursive>:
 800400a:	4770      	bx	lr

0800400c <_free_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4605      	mov	r5, r0
 8004010:	2900      	cmp	r1, #0
 8004012:	d040      	beq.n	8004096 <_free_r+0x8a>
 8004014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004018:	1f0c      	subs	r4, r1, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	bfb8      	it	lt
 800401e:	18e4      	addlt	r4, r4, r3
 8004020:	f000 f8dc 	bl	80041dc <__malloc_lock>
 8004024:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <_free_r+0x8c>)
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	b933      	cbnz	r3, 8004038 <_free_r+0x2c>
 800402a:	6063      	str	r3, [r4, #4]
 800402c:	6014      	str	r4, [r2, #0]
 800402e:	4628      	mov	r0, r5
 8004030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004034:	f000 b8d8 	b.w	80041e8 <__malloc_unlock>
 8004038:	42a3      	cmp	r3, r4
 800403a:	d908      	bls.n	800404e <_free_r+0x42>
 800403c:	6820      	ldr	r0, [r4, #0]
 800403e:	1821      	adds	r1, r4, r0
 8004040:	428b      	cmp	r3, r1
 8004042:	bf01      	itttt	eq
 8004044:	6819      	ldreq	r1, [r3, #0]
 8004046:	685b      	ldreq	r3, [r3, #4]
 8004048:	1809      	addeq	r1, r1, r0
 800404a:	6021      	streq	r1, [r4, #0]
 800404c:	e7ed      	b.n	800402a <_free_r+0x1e>
 800404e:	461a      	mov	r2, r3
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	b10b      	cbz	r3, 8004058 <_free_r+0x4c>
 8004054:	42a3      	cmp	r3, r4
 8004056:	d9fa      	bls.n	800404e <_free_r+0x42>
 8004058:	6811      	ldr	r1, [r2, #0]
 800405a:	1850      	adds	r0, r2, r1
 800405c:	42a0      	cmp	r0, r4
 800405e:	d10b      	bne.n	8004078 <_free_r+0x6c>
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	4401      	add	r1, r0
 8004064:	1850      	adds	r0, r2, r1
 8004066:	4283      	cmp	r3, r0
 8004068:	6011      	str	r1, [r2, #0]
 800406a:	d1e0      	bne.n	800402e <_free_r+0x22>
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4408      	add	r0, r1
 8004072:	6010      	str	r0, [r2, #0]
 8004074:	6053      	str	r3, [r2, #4]
 8004076:	e7da      	b.n	800402e <_free_r+0x22>
 8004078:	d902      	bls.n	8004080 <_free_r+0x74>
 800407a:	230c      	movs	r3, #12
 800407c:	602b      	str	r3, [r5, #0]
 800407e:	e7d6      	b.n	800402e <_free_r+0x22>
 8004080:	6820      	ldr	r0, [r4, #0]
 8004082:	1821      	adds	r1, r4, r0
 8004084:	428b      	cmp	r3, r1
 8004086:	bf01      	itttt	eq
 8004088:	6819      	ldreq	r1, [r3, #0]
 800408a:	685b      	ldreq	r3, [r3, #4]
 800408c:	1809      	addeq	r1, r1, r0
 800408e:	6021      	streq	r1, [r4, #0]
 8004090:	6063      	str	r3, [r4, #4]
 8004092:	6054      	str	r4, [r2, #4]
 8004094:	e7cb      	b.n	800402e <_free_r+0x22>
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	20000394 	.word	0x20000394

0800409c <sbrk_aligned>:
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	4e0e      	ldr	r6, [pc, #56]	; (80040d8 <sbrk_aligned+0x3c>)
 80040a0:	460c      	mov	r4, r1
 80040a2:	6831      	ldr	r1, [r6, #0]
 80040a4:	4605      	mov	r5, r0
 80040a6:	b911      	cbnz	r1, 80040ae <sbrk_aligned+0x12>
 80040a8:	f000 fbaa 	bl	8004800 <_sbrk_r>
 80040ac:	6030      	str	r0, [r6, #0]
 80040ae:	4621      	mov	r1, r4
 80040b0:	4628      	mov	r0, r5
 80040b2:	f000 fba5 	bl	8004800 <_sbrk_r>
 80040b6:	1c43      	adds	r3, r0, #1
 80040b8:	d00a      	beq.n	80040d0 <sbrk_aligned+0x34>
 80040ba:	1cc4      	adds	r4, r0, #3
 80040bc:	f024 0403 	bic.w	r4, r4, #3
 80040c0:	42a0      	cmp	r0, r4
 80040c2:	d007      	beq.n	80040d4 <sbrk_aligned+0x38>
 80040c4:	1a21      	subs	r1, r4, r0
 80040c6:	4628      	mov	r0, r5
 80040c8:	f000 fb9a 	bl	8004800 <_sbrk_r>
 80040cc:	3001      	adds	r0, #1
 80040ce:	d101      	bne.n	80040d4 <sbrk_aligned+0x38>
 80040d0:	f04f 34ff 	mov.w	r4, #4294967295
 80040d4:	4620      	mov	r0, r4
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	20000398 	.word	0x20000398

080040dc <_malloc_r>:
 80040dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040e0:	1ccd      	adds	r5, r1, #3
 80040e2:	f025 0503 	bic.w	r5, r5, #3
 80040e6:	3508      	adds	r5, #8
 80040e8:	2d0c      	cmp	r5, #12
 80040ea:	bf38      	it	cc
 80040ec:	250c      	movcc	r5, #12
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	4607      	mov	r7, r0
 80040f2:	db01      	blt.n	80040f8 <_malloc_r+0x1c>
 80040f4:	42a9      	cmp	r1, r5
 80040f6:	d905      	bls.n	8004104 <_malloc_r+0x28>
 80040f8:	230c      	movs	r3, #12
 80040fa:	2600      	movs	r6, #0
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	4630      	mov	r0, r6
 8004100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004104:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80041d8 <_malloc_r+0xfc>
 8004108:	f000 f868 	bl	80041dc <__malloc_lock>
 800410c:	f8d8 3000 	ldr.w	r3, [r8]
 8004110:	461c      	mov	r4, r3
 8004112:	bb5c      	cbnz	r4, 800416c <_malloc_r+0x90>
 8004114:	4629      	mov	r1, r5
 8004116:	4638      	mov	r0, r7
 8004118:	f7ff ffc0 	bl	800409c <sbrk_aligned>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	4604      	mov	r4, r0
 8004120:	d155      	bne.n	80041ce <_malloc_r+0xf2>
 8004122:	f8d8 4000 	ldr.w	r4, [r8]
 8004126:	4626      	mov	r6, r4
 8004128:	2e00      	cmp	r6, #0
 800412a:	d145      	bne.n	80041b8 <_malloc_r+0xdc>
 800412c:	2c00      	cmp	r4, #0
 800412e:	d048      	beq.n	80041c2 <_malloc_r+0xe6>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	4631      	mov	r1, r6
 8004134:	4638      	mov	r0, r7
 8004136:	eb04 0903 	add.w	r9, r4, r3
 800413a:	f000 fb61 	bl	8004800 <_sbrk_r>
 800413e:	4581      	cmp	r9, r0
 8004140:	d13f      	bne.n	80041c2 <_malloc_r+0xe6>
 8004142:	6821      	ldr	r1, [r4, #0]
 8004144:	4638      	mov	r0, r7
 8004146:	1a6d      	subs	r5, r5, r1
 8004148:	4629      	mov	r1, r5
 800414a:	f7ff ffa7 	bl	800409c <sbrk_aligned>
 800414e:	3001      	adds	r0, #1
 8004150:	d037      	beq.n	80041c2 <_malloc_r+0xe6>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	442b      	add	r3, r5
 8004156:	6023      	str	r3, [r4, #0]
 8004158:	f8d8 3000 	ldr.w	r3, [r8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d038      	beq.n	80041d2 <_malloc_r+0xf6>
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	42a2      	cmp	r2, r4
 8004164:	d12b      	bne.n	80041be <_malloc_r+0xe2>
 8004166:	2200      	movs	r2, #0
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	e00f      	b.n	800418c <_malloc_r+0xb0>
 800416c:	6822      	ldr	r2, [r4, #0]
 800416e:	1b52      	subs	r2, r2, r5
 8004170:	d41f      	bmi.n	80041b2 <_malloc_r+0xd6>
 8004172:	2a0b      	cmp	r2, #11
 8004174:	d917      	bls.n	80041a6 <_malloc_r+0xca>
 8004176:	1961      	adds	r1, r4, r5
 8004178:	42a3      	cmp	r3, r4
 800417a:	6025      	str	r5, [r4, #0]
 800417c:	bf18      	it	ne
 800417e:	6059      	strne	r1, [r3, #4]
 8004180:	6863      	ldr	r3, [r4, #4]
 8004182:	bf08      	it	eq
 8004184:	f8c8 1000 	streq.w	r1, [r8]
 8004188:	5162      	str	r2, [r4, r5]
 800418a:	604b      	str	r3, [r1, #4]
 800418c:	4638      	mov	r0, r7
 800418e:	f104 060b 	add.w	r6, r4, #11
 8004192:	f000 f829 	bl	80041e8 <__malloc_unlock>
 8004196:	f026 0607 	bic.w	r6, r6, #7
 800419a:	1d23      	adds	r3, r4, #4
 800419c:	1af2      	subs	r2, r6, r3
 800419e:	d0ae      	beq.n	80040fe <_malloc_r+0x22>
 80041a0:	1b9b      	subs	r3, r3, r6
 80041a2:	50a3      	str	r3, [r4, r2]
 80041a4:	e7ab      	b.n	80040fe <_malloc_r+0x22>
 80041a6:	42a3      	cmp	r3, r4
 80041a8:	6862      	ldr	r2, [r4, #4]
 80041aa:	d1dd      	bne.n	8004168 <_malloc_r+0x8c>
 80041ac:	f8c8 2000 	str.w	r2, [r8]
 80041b0:	e7ec      	b.n	800418c <_malloc_r+0xb0>
 80041b2:	4623      	mov	r3, r4
 80041b4:	6864      	ldr	r4, [r4, #4]
 80041b6:	e7ac      	b.n	8004112 <_malloc_r+0x36>
 80041b8:	4634      	mov	r4, r6
 80041ba:	6876      	ldr	r6, [r6, #4]
 80041bc:	e7b4      	b.n	8004128 <_malloc_r+0x4c>
 80041be:	4613      	mov	r3, r2
 80041c0:	e7cc      	b.n	800415c <_malloc_r+0x80>
 80041c2:	230c      	movs	r3, #12
 80041c4:	4638      	mov	r0, r7
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	f000 f80e 	bl	80041e8 <__malloc_unlock>
 80041cc:	e797      	b.n	80040fe <_malloc_r+0x22>
 80041ce:	6025      	str	r5, [r4, #0]
 80041d0:	e7dc      	b.n	800418c <_malloc_r+0xb0>
 80041d2:	605b      	str	r3, [r3, #4]
 80041d4:	deff      	udf	#255	; 0xff
 80041d6:	bf00      	nop
 80041d8:	20000394 	.word	0x20000394

080041dc <__malloc_lock>:
 80041dc:	4801      	ldr	r0, [pc, #4]	; (80041e4 <__malloc_lock+0x8>)
 80041de:	f7ff bf13 	b.w	8004008 <__retarget_lock_acquire_recursive>
 80041e2:	bf00      	nop
 80041e4:	20000390 	.word	0x20000390

080041e8 <__malloc_unlock>:
 80041e8:	4801      	ldr	r0, [pc, #4]	; (80041f0 <__malloc_unlock+0x8>)
 80041ea:	f7ff bf0e 	b.w	800400a <__retarget_lock_release_recursive>
 80041ee:	bf00      	nop
 80041f0:	20000390 	.word	0x20000390

080041f4 <__ssputs_r>:
 80041f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f8:	461f      	mov	r7, r3
 80041fa:	688e      	ldr	r6, [r1, #8]
 80041fc:	4682      	mov	sl, r0
 80041fe:	42be      	cmp	r6, r7
 8004200:	460c      	mov	r4, r1
 8004202:	4690      	mov	r8, r2
 8004204:	680b      	ldr	r3, [r1, #0]
 8004206:	d82c      	bhi.n	8004262 <__ssputs_r+0x6e>
 8004208:	898a      	ldrh	r2, [r1, #12]
 800420a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800420e:	d026      	beq.n	800425e <__ssputs_r+0x6a>
 8004210:	6965      	ldr	r5, [r4, #20]
 8004212:	6909      	ldr	r1, [r1, #16]
 8004214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004218:	eba3 0901 	sub.w	r9, r3, r1
 800421c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004220:	1c7b      	adds	r3, r7, #1
 8004222:	444b      	add	r3, r9
 8004224:	106d      	asrs	r5, r5, #1
 8004226:	429d      	cmp	r5, r3
 8004228:	bf38      	it	cc
 800422a:	461d      	movcc	r5, r3
 800422c:	0553      	lsls	r3, r2, #21
 800422e:	d527      	bpl.n	8004280 <__ssputs_r+0x8c>
 8004230:	4629      	mov	r1, r5
 8004232:	f7ff ff53 	bl	80040dc <_malloc_r>
 8004236:	4606      	mov	r6, r0
 8004238:	b360      	cbz	r0, 8004294 <__ssputs_r+0xa0>
 800423a:	464a      	mov	r2, r9
 800423c:	6921      	ldr	r1, [r4, #16]
 800423e:	f000 fafd 	bl	800483c <memcpy>
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424c:	81a3      	strh	r3, [r4, #12]
 800424e:	6126      	str	r6, [r4, #16]
 8004250:	444e      	add	r6, r9
 8004252:	6026      	str	r6, [r4, #0]
 8004254:	463e      	mov	r6, r7
 8004256:	6165      	str	r5, [r4, #20]
 8004258:	eba5 0509 	sub.w	r5, r5, r9
 800425c:	60a5      	str	r5, [r4, #8]
 800425e:	42be      	cmp	r6, r7
 8004260:	d900      	bls.n	8004264 <__ssputs_r+0x70>
 8004262:	463e      	mov	r6, r7
 8004264:	4632      	mov	r2, r6
 8004266:	4641      	mov	r1, r8
 8004268:	6820      	ldr	r0, [r4, #0]
 800426a:	f000 faaf 	bl	80047cc <memmove>
 800426e:	2000      	movs	r0, #0
 8004270:	68a3      	ldr	r3, [r4, #8]
 8004272:	1b9b      	subs	r3, r3, r6
 8004274:	60a3      	str	r3, [r4, #8]
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	4433      	add	r3, r6
 800427a:	6023      	str	r3, [r4, #0]
 800427c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004280:	462a      	mov	r2, r5
 8004282:	f000 fae9 	bl	8004858 <_realloc_r>
 8004286:	4606      	mov	r6, r0
 8004288:	2800      	cmp	r0, #0
 800428a:	d1e0      	bne.n	800424e <__ssputs_r+0x5a>
 800428c:	4650      	mov	r0, sl
 800428e:	6921      	ldr	r1, [r4, #16]
 8004290:	f7ff febc 	bl	800400c <_free_r>
 8004294:	230c      	movs	r3, #12
 8004296:	f8ca 3000 	str.w	r3, [sl]
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	f04f 30ff 	mov.w	r0, #4294967295
 80042a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a4:	81a3      	strh	r3, [r4, #12]
 80042a6:	e7e9      	b.n	800427c <__ssputs_r+0x88>

080042a8 <_svfiprintf_r>:
 80042a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ac:	4698      	mov	r8, r3
 80042ae:	898b      	ldrh	r3, [r1, #12]
 80042b0:	4607      	mov	r7, r0
 80042b2:	061b      	lsls	r3, r3, #24
 80042b4:	460d      	mov	r5, r1
 80042b6:	4614      	mov	r4, r2
 80042b8:	b09d      	sub	sp, #116	; 0x74
 80042ba:	d50e      	bpl.n	80042da <_svfiprintf_r+0x32>
 80042bc:	690b      	ldr	r3, [r1, #16]
 80042be:	b963      	cbnz	r3, 80042da <_svfiprintf_r+0x32>
 80042c0:	2140      	movs	r1, #64	; 0x40
 80042c2:	f7ff ff0b 	bl	80040dc <_malloc_r>
 80042c6:	6028      	str	r0, [r5, #0]
 80042c8:	6128      	str	r0, [r5, #16]
 80042ca:	b920      	cbnz	r0, 80042d6 <_svfiprintf_r+0x2e>
 80042cc:	230c      	movs	r3, #12
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	e0d0      	b.n	8004478 <_svfiprintf_r+0x1d0>
 80042d6:	2340      	movs	r3, #64	; 0x40
 80042d8:	616b      	str	r3, [r5, #20]
 80042da:	2300      	movs	r3, #0
 80042dc:	9309      	str	r3, [sp, #36]	; 0x24
 80042de:	2320      	movs	r3, #32
 80042e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042e4:	2330      	movs	r3, #48	; 0x30
 80042e6:	f04f 0901 	mov.w	r9, #1
 80042ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80042ee:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004490 <_svfiprintf_r+0x1e8>
 80042f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042f6:	4623      	mov	r3, r4
 80042f8:	469a      	mov	sl, r3
 80042fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042fe:	b10a      	cbz	r2, 8004304 <_svfiprintf_r+0x5c>
 8004300:	2a25      	cmp	r2, #37	; 0x25
 8004302:	d1f9      	bne.n	80042f8 <_svfiprintf_r+0x50>
 8004304:	ebba 0b04 	subs.w	fp, sl, r4
 8004308:	d00b      	beq.n	8004322 <_svfiprintf_r+0x7a>
 800430a:	465b      	mov	r3, fp
 800430c:	4622      	mov	r2, r4
 800430e:	4629      	mov	r1, r5
 8004310:	4638      	mov	r0, r7
 8004312:	f7ff ff6f 	bl	80041f4 <__ssputs_r>
 8004316:	3001      	adds	r0, #1
 8004318:	f000 80a9 	beq.w	800446e <_svfiprintf_r+0x1c6>
 800431c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800431e:	445a      	add	r2, fp
 8004320:	9209      	str	r2, [sp, #36]	; 0x24
 8004322:	f89a 3000 	ldrb.w	r3, [sl]
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80a1 	beq.w	800446e <_svfiprintf_r+0x1c6>
 800432c:	2300      	movs	r3, #0
 800432e:	f04f 32ff 	mov.w	r2, #4294967295
 8004332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004336:	f10a 0a01 	add.w	sl, sl, #1
 800433a:	9304      	str	r3, [sp, #16]
 800433c:	9307      	str	r3, [sp, #28]
 800433e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004342:	931a      	str	r3, [sp, #104]	; 0x68
 8004344:	4654      	mov	r4, sl
 8004346:	2205      	movs	r2, #5
 8004348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800434c:	4850      	ldr	r0, [pc, #320]	; (8004490 <_svfiprintf_r+0x1e8>)
 800434e:	f000 fa67 	bl	8004820 <memchr>
 8004352:	9a04      	ldr	r2, [sp, #16]
 8004354:	b9d8      	cbnz	r0, 800438e <_svfiprintf_r+0xe6>
 8004356:	06d0      	lsls	r0, r2, #27
 8004358:	bf44      	itt	mi
 800435a:	2320      	movmi	r3, #32
 800435c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004360:	0711      	lsls	r1, r2, #28
 8004362:	bf44      	itt	mi
 8004364:	232b      	movmi	r3, #43	; 0x2b
 8004366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800436a:	f89a 3000 	ldrb.w	r3, [sl]
 800436e:	2b2a      	cmp	r3, #42	; 0x2a
 8004370:	d015      	beq.n	800439e <_svfiprintf_r+0xf6>
 8004372:	4654      	mov	r4, sl
 8004374:	2000      	movs	r0, #0
 8004376:	f04f 0c0a 	mov.w	ip, #10
 800437a:	9a07      	ldr	r2, [sp, #28]
 800437c:	4621      	mov	r1, r4
 800437e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004382:	3b30      	subs	r3, #48	; 0x30
 8004384:	2b09      	cmp	r3, #9
 8004386:	d94d      	bls.n	8004424 <_svfiprintf_r+0x17c>
 8004388:	b1b0      	cbz	r0, 80043b8 <_svfiprintf_r+0x110>
 800438a:	9207      	str	r2, [sp, #28]
 800438c:	e014      	b.n	80043b8 <_svfiprintf_r+0x110>
 800438e:	eba0 0308 	sub.w	r3, r0, r8
 8004392:	fa09 f303 	lsl.w	r3, r9, r3
 8004396:	4313      	orrs	r3, r2
 8004398:	46a2      	mov	sl, r4
 800439a:	9304      	str	r3, [sp, #16]
 800439c:	e7d2      	b.n	8004344 <_svfiprintf_r+0x9c>
 800439e:	9b03      	ldr	r3, [sp, #12]
 80043a0:	1d19      	adds	r1, r3, #4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	9103      	str	r1, [sp, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bfbb      	ittet	lt
 80043aa:	425b      	neglt	r3, r3
 80043ac:	f042 0202 	orrlt.w	r2, r2, #2
 80043b0:	9307      	strge	r3, [sp, #28]
 80043b2:	9307      	strlt	r3, [sp, #28]
 80043b4:	bfb8      	it	lt
 80043b6:	9204      	strlt	r2, [sp, #16]
 80043b8:	7823      	ldrb	r3, [r4, #0]
 80043ba:	2b2e      	cmp	r3, #46	; 0x2e
 80043bc:	d10c      	bne.n	80043d8 <_svfiprintf_r+0x130>
 80043be:	7863      	ldrb	r3, [r4, #1]
 80043c0:	2b2a      	cmp	r3, #42	; 0x2a
 80043c2:	d134      	bne.n	800442e <_svfiprintf_r+0x186>
 80043c4:	9b03      	ldr	r3, [sp, #12]
 80043c6:	3402      	adds	r4, #2
 80043c8:	1d1a      	adds	r2, r3, #4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	9203      	str	r2, [sp, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bfb8      	it	lt
 80043d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80043d6:	9305      	str	r3, [sp, #20]
 80043d8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004494 <_svfiprintf_r+0x1ec>
 80043dc:	2203      	movs	r2, #3
 80043de:	4650      	mov	r0, sl
 80043e0:	7821      	ldrb	r1, [r4, #0]
 80043e2:	f000 fa1d 	bl	8004820 <memchr>
 80043e6:	b138      	cbz	r0, 80043f8 <_svfiprintf_r+0x150>
 80043e8:	2240      	movs	r2, #64	; 0x40
 80043ea:	9b04      	ldr	r3, [sp, #16]
 80043ec:	eba0 000a 	sub.w	r0, r0, sl
 80043f0:	4082      	lsls	r2, r0
 80043f2:	4313      	orrs	r3, r2
 80043f4:	3401      	adds	r4, #1
 80043f6:	9304      	str	r3, [sp, #16]
 80043f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043fc:	2206      	movs	r2, #6
 80043fe:	4826      	ldr	r0, [pc, #152]	; (8004498 <_svfiprintf_r+0x1f0>)
 8004400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004404:	f000 fa0c 	bl	8004820 <memchr>
 8004408:	2800      	cmp	r0, #0
 800440a:	d038      	beq.n	800447e <_svfiprintf_r+0x1d6>
 800440c:	4b23      	ldr	r3, [pc, #140]	; (800449c <_svfiprintf_r+0x1f4>)
 800440e:	bb1b      	cbnz	r3, 8004458 <_svfiprintf_r+0x1b0>
 8004410:	9b03      	ldr	r3, [sp, #12]
 8004412:	3307      	adds	r3, #7
 8004414:	f023 0307 	bic.w	r3, r3, #7
 8004418:	3308      	adds	r3, #8
 800441a:	9303      	str	r3, [sp, #12]
 800441c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800441e:	4433      	add	r3, r6
 8004420:	9309      	str	r3, [sp, #36]	; 0x24
 8004422:	e768      	b.n	80042f6 <_svfiprintf_r+0x4e>
 8004424:	460c      	mov	r4, r1
 8004426:	2001      	movs	r0, #1
 8004428:	fb0c 3202 	mla	r2, ip, r2, r3
 800442c:	e7a6      	b.n	800437c <_svfiprintf_r+0xd4>
 800442e:	2300      	movs	r3, #0
 8004430:	f04f 0c0a 	mov.w	ip, #10
 8004434:	4619      	mov	r1, r3
 8004436:	3401      	adds	r4, #1
 8004438:	9305      	str	r3, [sp, #20]
 800443a:	4620      	mov	r0, r4
 800443c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004440:	3a30      	subs	r2, #48	; 0x30
 8004442:	2a09      	cmp	r2, #9
 8004444:	d903      	bls.n	800444e <_svfiprintf_r+0x1a6>
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0c6      	beq.n	80043d8 <_svfiprintf_r+0x130>
 800444a:	9105      	str	r1, [sp, #20]
 800444c:	e7c4      	b.n	80043d8 <_svfiprintf_r+0x130>
 800444e:	4604      	mov	r4, r0
 8004450:	2301      	movs	r3, #1
 8004452:	fb0c 2101 	mla	r1, ip, r1, r2
 8004456:	e7f0      	b.n	800443a <_svfiprintf_r+0x192>
 8004458:	ab03      	add	r3, sp, #12
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	462a      	mov	r2, r5
 800445e:	4638      	mov	r0, r7
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <_svfiprintf_r+0x1f8>)
 8004462:	a904      	add	r1, sp, #16
 8004464:	f3af 8000 	nop.w
 8004468:	1c42      	adds	r2, r0, #1
 800446a:	4606      	mov	r6, r0
 800446c:	d1d6      	bne.n	800441c <_svfiprintf_r+0x174>
 800446e:	89ab      	ldrh	r3, [r5, #12]
 8004470:	065b      	lsls	r3, r3, #25
 8004472:	f53f af2d 	bmi.w	80042d0 <_svfiprintf_r+0x28>
 8004476:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004478:	b01d      	add	sp, #116	; 0x74
 800447a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447e:	ab03      	add	r3, sp, #12
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	462a      	mov	r2, r5
 8004484:	4638      	mov	r0, r7
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <_svfiprintf_r+0x1f8>)
 8004488:	a904      	add	r1, sp, #16
 800448a:	f000 f87d 	bl	8004588 <_printf_i>
 800448e:	e7eb      	b.n	8004468 <_svfiprintf_r+0x1c0>
 8004490:	08004926 	.word	0x08004926
 8004494:	0800492c 	.word	0x0800492c
 8004498:	08004930 	.word	0x08004930
 800449c:	00000000 	.word	0x00000000
 80044a0:	080041f5 	.word	0x080041f5

080044a4 <_printf_common>:
 80044a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	4616      	mov	r6, r2
 80044aa:	4699      	mov	r9, r3
 80044ac:	688a      	ldr	r2, [r1, #8]
 80044ae:	690b      	ldr	r3, [r1, #16]
 80044b0:	4607      	mov	r7, r0
 80044b2:	4293      	cmp	r3, r2
 80044b4:	bfb8      	it	lt
 80044b6:	4613      	movlt	r3, r2
 80044b8:	6033      	str	r3, [r6, #0]
 80044ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044be:	460c      	mov	r4, r1
 80044c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044c4:	b10a      	cbz	r2, 80044ca <_printf_common+0x26>
 80044c6:	3301      	adds	r3, #1
 80044c8:	6033      	str	r3, [r6, #0]
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	0699      	lsls	r1, r3, #26
 80044ce:	bf42      	ittt	mi
 80044d0:	6833      	ldrmi	r3, [r6, #0]
 80044d2:	3302      	addmi	r3, #2
 80044d4:	6033      	strmi	r3, [r6, #0]
 80044d6:	6825      	ldr	r5, [r4, #0]
 80044d8:	f015 0506 	ands.w	r5, r5, #6
 80044dc:	d106      	bne.n	80044ec <_printf_common+0x48>
 80044de:	f104 0a19 	add.w	sl, r4, #25
 80044e2:	68e3      	ldr	r3, [r4, #12]
 80044e4:	6832      	ldr	r2, [r6, #0]
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	42ab      	cmp	r3, r5
 80044ea:	dc2b      	bgt.n	8004544 <_printf_common+0xa0>
 80044ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044f0:	1e13      	subs	r3, r2, #0
 80044f2:	6822      	ldr	r2, [r4, #0]
 80044f4:	bf18      	it	ne
 80044f6:	2301      	movne	r3, #1
 80044f8:	0692      	lsls	r2, r2, #26
 80044fa:	d430      	bmi.n	800455e <_printf_common+0xba>
 80044fc:	4649      	mov	r1, r9
 80044fe:	4638      	mov	r0, r7
 8004500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004504:	47c0      	blx	r8
 8004506:	3001      	adds	r0, #1
 8004508:	d023      	beq.n	8004552 <_printf_common+0xae>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	6922      	ldr	r2, [r4, #16]
 800450e:	f003 0306 	and.w	r3, r3, #6
 8004512:	2b04      	cmp	r3, #4
 8004514:	bf14      	ite	ne
 8004516:	2500      	movne	r5, #0
 8004518:	6833      	ldreq	r3, [r6, #0]
 800451a:	f04f 0600 	mov.w	r6, #0
 800451e:	bf08      	it	eq
 8004520:	68e5      	ldreq	r5, [r4, #12]
 8004522:	f104 041a 	add.w	r4, r4, #26
 8004526:	bf08      	it	eq
 8004528:	1aed      	subeq	r5, r5, r3
 800452a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800452e:	bf08      	it	eq
 8004530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004534:	4293      	cmp	r3, r2
 8004536:	bfc4      	itt	gt
 8004538:	1a9b      	subgt	r3, r3, r2
 800453a:	18ed      	addgt	r5, r5, r3
 800453c:	42b5      	cmp	r5, r6
 800453e:	d11a      	bne.n	8004576 <_printf_common+0xd2>
 8004540:	2000      	movs	r0, #0
 8004542:	e008      	b.n	8004556 <_printf_common+0xb2>
 8004544:	2301      	movs	r3, #1
 8004546:	4652      	mov	r2, sl
 8004548:	4649      	mov	r1, r9
 800454a:	4638      	mov	r0, r7
 800454c:	47c0      	blx	r8
 800454e:	3001      	adds	r0, #1
 8004550:	d103      	bne.n	800455a <_printf_common+0xb6>
 8004552:	f04f 30ff 	mov.w	r0, #4294967295
 8004556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800455a:	3501      	adds	r5, #1
 800455c:	e7c1      	b.n	80044e2 <_printf_common+0x3e>
 800455e:	2030      	movs	r0, #48	; 0x30
 8004560:	18e1      	adds	r1, r4, r3
 8004562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800456c:	4422      	add	r2, r4
 800456e:	3302      	adds	r3, #2
 8004570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004574:	e7c2      	b.n	80044fc <_printf_common+0x58>
 8004576:	2301      	movs	r3, #1
 8004578:	4622      	mov	r2, r4
 800457a:	4649      	mov	r1, r9
 800457c:	4638      	mov	r0, r7
 800457e:	47c0      	blx	r8
 8004580:	3001      	adds	r0, #1
 8004582:	d0e6      	beq.n	8004552 <_printf_common+0xae>
 8004584:	3601      	adds	r6, #1
 8004586:	e7d9      	b.n	800453c <_printf_common+0x98>

08004588 <_printf_i>:
 8004588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800458c:	7e0f      	ldrb	r7, [r1, #24]
 800458e:	4691      	mov	r9, r2
 8004590:	2f78      	cmp	r7, #120	; 0x78
 8004592:	4680      	mov	r8, r0
 8004594:	460c      	mov	r4, r1
 8004596:	469a      	mov	sl, r3
 8004598:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800459a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800459e:	d807      	bhi.n	80045b0 <_printf_i+0x28>
 80045a0:	2f62      	cmp	r7, #98	; 0x62
 80045a2:	d80a      	bhi.n	80045ba <_printf_i+0x32>
 80045a4:	2f00      	cmp	r7, #0
 80045a6:	f000 80d5 	beq.w	8004754 <_printf_i+0x1cc>
 80045aa:	2f58      	cmp	r7, #88	; 0x58
 80045ac:	f000 80c1 	beq.w	8004732 <_printf_i+0x1aa>
 80045b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045b8:	e03a      	b.n	8004630 <_printf_i+0xa8>
 80045ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045be:	2b15      	cmp	r3, #21
 80045c0:	d8f6      	bhi.n	80045b0 <_printf_i+0x28>
 80045c2:	a101      	add	r1, pc, #4	; (adr r1, 80045c8 <_printf_i+0x40>)
 80045c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045c8:	08004621 	.word	0x08004621
 80045cc:	08004635 	.word	0x08004635
 80045d0:	080045b1 	.word	0x080045b1
 80045d4:	080045b1 	.word	0x080045b1
 80045d8:	080045b1 	.word	0x080045b1
 80045dc:	080045b1 	.word	0x080045b1
 80045e0:	08004635 	.word	0x08004635
 80045e4:	080045b1 	.word	0x080045b1
 80045e8:	080045b1 	.word	0x080045b1
 80045ec:	080045b1 	.word	0x080045b1
 80045f0:	080045b1 	.word	0x080045b1
 80045f4:	0800473b 	.word	0x0800473b
 80045f8:	08004661 	.word	0x08004661
 80045fc:	080046f5 	.word	0x080046f5
 8004600:	080045b1 	.word	0x080045b1
 8004604:	080045b1 	.word	0x080045b1
 8004608:	0800475d 	.word	0x0800475d
 800460c:	080045b1 	.word	0x080045b1
 8004610:	08004661 	.word	0x08004661
 8004614:	080045b1 	.word	0x080045b1
 8004618:	080045b1 	.word	0x080045b1
 800461c:	080046fd 	.word	0x080046fd
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	1d1a      	adds	r2, r3, #4
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	602a      	str	r2, [r5, #0]
 8004628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800462c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004630:	2301      	movs	r3, #1
 8004632:	e0a0      	b.n	8004776 <_printf_i+0x1ee>
 8004634:	6820      	ldr	r0, [r4, #0]
 8004636:	682b      	ldr	r3, [r5, #0]
 8004638:	0607      	lsls	r7, r0, #24
 800463a:	f103 0104 	add.w	r1, r3, #4
 800463e:	6029      	str	r1, [r5, #0]
 8004640:	d501      	bpl.n	8004646 <_printf_i+0xbe>
 8004642:	681e      	ldr	r6, [r3, #0]
 8004644:	e003      	b.n	800464e <_printf_i+0xc6>
 8004646:	0646      	lsls	r6, r0, #25
 8004648:	d5fb      	bpl.n	8004642 <_printf_i+0xba>
 800464a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800464e:	2e00      	cmp	r6, #0
 8004650:	da03      	bge.n	800465a <_printf_i+0xd2>
 8004652:	232d      	movs	r3, #45	; 0x2d
 8004654:	4276      	negs	r6, r6
 8004656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800465a:	230a      	movs	r3, #10
 800465c:	4859      	ldr	r0, [pc, #356]	; (80047c4 <_printf_i+0x23c>)
 800465e:	e012      	b.n	8004686 <_printf_i+0xfe>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	6820      	ldr	r0, [r4, #0]
 8004664:	1d19      	adds	r1, r3, #4
 8004666:	6029      	str	r1, [r5, #0]
 8004668:	0605      	lsls	r5, r0, #24
 800466a:	d501      	bpl.n	8004670 <_printf_i+0xe8>
 800466c:	681e      	ldr	r6, [r3, #0]
 800466e:	e002      	b.n	8004676 <_printf_i+0xee>
 8004670:	0641      	lsls	r1, r0, #25
 8004672:	d5fb      	bpl.n	800466c <_printf_i+0xe4>
 8004674:	881e      	ldrh	r6, [r3, #0]
 8004676:	2f6f      	cmp	r7, #111	; 0x6f
 8004678:	bf0c      	ite	eq
 800467a:	2308      	moveq	r3, #8
 800467c:	230a      	movne	r3, #10
 800467e:	4851      	ldr	r0, [pc, #324]	; (80047c4 <_printf_i+0x23c>)
 8004680:	2100      	movs	r1, #0
 8004682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004686:	6865      	ldr	r5, [r4, #4]
 8004688:	2d00      	cmp	r5, #0
 800468a:	bfa8      	it	ge
 800468c:	6821      	ldrge	r1, [r4, #0]
 800468e:	60a5      	str	r5, [r4, #8]
 8004690:	bfa4      	itt	ge
 8004692:	f021 0104 	bicge.w	r1, r1, #4
 8004696:	6021      	strge	r1, [r4, #0]
 8004698:	b90e      	cbnz	r6, 800469e <_printf_i+0x116>
 800469a:	2d00      	cmp	r5, #0
 800469c:	d04b      	beq.n	8004736 <_printf_i+0x1ae>
 800469e:	4615      	mov	r5, r2
 80046a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80046a4:	fb03 6711 	mls	r7, r3, r1, r6
 80046a8:	5dc7      	ldrb	r7, [r0, r7]
 80046aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046ae:	4637      	mov	r7, r6
 80046b0:	42bb      	cmp	r3, r7
 80046b2:	460e      	mov	r6, r1
 80046b4:	d9f4      	bls.n	80046a0 <_printf_i+0x118>
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d10b      	bne.n	80046d2 <_printf_i+0x14a>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	07de      	lsls	r6, r3, #31
 80046be:	d508      	bpl.n	80046d2 <_printf_i+0x14a>
 80046c0:	6923      	ldr	r3, [r4, #16]
 80046c2:	6861      	ldr	r1, [r4, #4]
 80046c4:	4299      	cmp	r1, r3
 80046c6:	bfde      	ittt	le
 80046c8:	2330      	movle	r3, #48	; 0x30
 80046ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046d2:	1b52      	subs	r2, r2, r5
 80046d4:	6122      	str	r2, [r4, #16]
 80046d6:	464b      	mov	r3, r9
 80046d8:	4621      	mov	r1, r4
 80046da:	4640      	mov	r0, r8
 80046dc:	f8cd a000 	str.w	sl, [sp]
 80046e0:	aa03      	add	r2, sp, #12
 80046e2:	f7ff fedf 	bl	80044a4 <_printf_common>
 80046e6:	3001      	adds	r0, #1
 80046e8:	d14a      	bne.n	8004780 <_printf_i+0x1f8>
 80046ea:	f04f 30ff 	mov.w	r0, #4294967295
 80046ee:	b004      	add	sp, #16
 80046f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	f043 0320 	orr.w	r3, r3, #32
 80046fa:	6023      	str	r3, [r4, #0]
 80046fc:	2778      	movs	r7, #120	; 0x78
 80046fe:	4832      	ldr	r0, [pc, #200]	; (80047c8 <_printf_i+0x240>)
 8004700:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	6829      	ldr	r1, [r5, #0]
 8004708:	061f      	lsls	r7, r3, #24
 800470a:	f851 6b04 	ldr.w	r6, [r1], #4
 800470e:	d402      	bmi.n	8004716 <_printf_i+0x18e>
 8004710:	065f      	lsls	r7, r3, #25
 8004712:	bf48      	it	mi
 8004714:	b2b6      	uxthmi	r6, r6
 8004716:	07df      	lsls	r7, r3, #31
 8004718:	bf48      	it	mi
 800471a:	f043 0320 	orrmi.w	r3, r3, #32
 800471e:	6029      	str	r1, [r5, #0]
 8004720:	bf48      	it	mi
 8004722:	6023      	strmi	r3, [r4, #0]
 8004724:	b91e      	cbnz	r6, 800472e <_printf_i+0x1a6>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	f023 0320 	bic.w	r3, r3, #32
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	2310      	movs	r3, #16
 8004730:	e7a6      	b.n	8004680 <_printf_i+0xf8>
 8004732:	4824      	ldr	r0, [pc, #144]	; (80047c4 <_printf_i+0x23c>)
 8004734:	e7e4      	b.n	8004700 <_printf_i+0x178>
 8004736:	4615      	mov	r5, r2
 8004738:	e7bd      	b.n	80046b6 <_printf_i+0x12e>
 800473a:	682b      	ldr	r3, [r5, #0]
 800473c:	6826      	ldr	r6, [r4, #0]
 800473e:	1d18      	adds	r0, r3, #4
 8004740:	6961      	ldr	r1, [r4, #20]
 8004742:	6028      	str	r0, [r5, #0]
 8004744:	0635      	lsls	r5, r6, #24
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	d501      	bpl.n	800474e <_printf_i+0x1c6>
 800474a:	6019      	str	r1, [r3, #0]
 800474c:	e002      	b.n	8004754 <_printf_i+0x1cc>
 800474e:	0670      	lsls	r0, r6, #25
 8004750:	d5fb      	bpl.n	800474a <_printf_i+0x1c2>
 8004752:	8019      	strh	r1, [r3, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	4615      	mov	r5, r2
 8004758:	6123      	str	r3, [r4, #16]
 800475a:	e7bc      	b.n	80046d6 <_printf_i+0x14e>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	2100      	movs	r1, #0
 8004760:	1d1a      	adds	r2, r3, #4
 8004762:	602a      	str	r2, [r5, #0]
 8004764:	681d      	ldr	r5, [r3, #0]
 8004766:	6862      	ldr	r2, [r4, #4]
 8004768:	4628      	mov	r0, r5
 800476a:	f000 f859 	bl	8004820 <memchr>
 800476e:	b108      	cbz	r0, 8004774 <_printf_i+0x1ec>
 8004770:	1b40      	subs	r0, r0, r5
 8004772:	6060      	str	r0, [r4, #4]
 8004774:	6863      	ldr	r3, [r4, #4]
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	2300      	movs	r3, #0
 800477a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800477e:	e7aa      	b.n	80046d6 <_printf_i+0x14e>
 8004780:	462a      	mov	r2, r5
 8004782:	4649      	mov	r1, r9
 8004784:	4640      	mov	r0, r8
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	47d0      	blx	sl
 800478a:	3001      	adds	r0, #1
 800478c:	d0ad      	beq.n	80046ea <_printf_i+0x162>
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	079b      	lsls	r3, r3, #30
 8004792:	d413      	bmi.n	80047bc <_printf_i+0x234>
 8004794:	68e0      	ldr	r0, [r4, #12]
 8004796:	9b03      	ldr	r3, [sp, #12]
 8004798:	4298      	cmp	r0, r3
 800479a:	bfb8      	it	lt
 800479c:	4618      	movlt	r0, r3
 800479e:	e7a6      	b.n	80046ee <_printf_i+0x166>
 80047a0:	2301      	movs	r3, #1
 80047a2:	4632      	mov	r2, r6
 80047a4:	4649      	mov	r1, r9
 80047a6:	4640      	mov	r0, r8
 80047a8:	47d0      	blx	sl
 80047aa:	3001      	adds	r0, #1
 80047ac:	d09d      	beq.n	80046ea <_printf_i+0x162>
 80047ae:	3501      	adds	r5, #1
 80047b0:	68e3      	ldr	r3, [r4, #12]
 80047b2:	9903      	ldr	r1, [sp, #12]
 80047b4:	1a5b      	subs	r3, r3, r1
 80047b6:	42ab      	cmp	r3, r5
 80047b8:	dcf2      	bgt.n	80047a0 <_printf_i+0x218>
 80047ba:	e7eb      	b.n	8004794 <_printf_i+0x20c>
 80047bc:	2500      	movs	r5, #0
 80047be:	f104 0619 	add.w	r6, r4, #25
 80047c2:	e7f5      	b.n	80047b0 <_printf_i+0x228>
 80047c4:	08004937 	.word	0x08004937
 80047c8:	08004948 	.word	0x08004948

080047cc <memmove>:
 80047cc:	4288      	cmp	r0, r1
 80047ce:	b510      	push	{r4, lr}
 80047d0:	eb01 0402 	add.w	r4, r1, r2
 80047d4:	d902      	bls.n	80047dc <memmove+0x10>
 80047d6:	4284      	cmp	r4, r0
 80047d8:	4623      	mov	r3, r4
 80047da:	d807      	bhi.n	80047ec <memmove+0x20>
 80047dc:	1e43      	subs	r3, r0, #1
 80047de:	42a1      	cmp	r1, r4
 80047e0:	d008      	beq.n	80047f4 <memmove+0x28>
 80047e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047ea:	e7f8      	b.n	80047de <memmove+0x12>
 80047ec:	4601      	mov	r1, r0
 80047ee:	4402      	add	r2, r0
 80047f0:	428a      	cmp	r2, r1
 80047f2:	d100      	bne.n	80047f6 <memmove+0x2a>
 80047f4:	bd10      	pop	{r4, pc}
 80047f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047fe:	e7f7      	b.n	80047f0 <memmove+0x24>

08004800 <_sbrk_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	2300      	movs	r3, #0
 8004804:	4d05      	ldr	r5, [pc, #20]	; (800481c <_sbrk_r+0x1c>)
 8004806:	4604      	mov	r4, r0
 8004808:	4608      	mov	r0, r1
 800480a:	602b      	str	r3, [r5, #0]
 800480c:	f7fd f95c 	bl	8001ac8 <_sbrk>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d102      	bne.n	800481a <_sbrk_r+0x1a>
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	b103      	cbz	r3, 800481a <_sbrk_r+0x1a>
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	bd38      	pop	{r3, r4, r5, pc}
 800481c:	2000038c 	.word	0x2000038c

08004820 <memchr>:
 8004820:	4603      	mov	r3, r0
 8004822:	b510      	push	{r4, lr}
 8004824:	b2c9      	uxtb	r1, r1
 8004826:	4402      	add	r2, r0
 8004828:	4293      	cmp	r3, r2
 800482a:	4618      	mov	r0, r3
 800482c:	d101      	bne.n	8004832 <memchr+0x12>
 800482e:	2000      	movs	r0, #0
 8004830:	e003      	b.n	800483a <memchr+0x1a>
 8004832:	7804      	ldrb	r4, [r0, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	428c      	cmp	r4, r1
 8004838:	d1f6      	bne.n	8004828 <memchr+0x8>
 800483a:	bd10      	pop	{r4, pc}

0800483c <memcpy>:
 800483c:	440a      	add	r2, r1
 800483e:	4291      	cmp	r1, r2
 8004840:	f100 33ff 	add.w	r3, r0, #4294967295
 8004844:	d100      	bne.n	8004848 <memcpy+0xc>
 8004846:	4770      	bx	lr
 8004848:	b510      	push	{r4, lr}
 800484a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800484e:	4291      	cmp	r1, r2
 8004850:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004854:	d1f9      	bne.n	800484a <memcpy+0xe>
 8004856:	bd10      	pop	{r4, pc}

08004858 <_realloc_r>:
 8004858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800485c:	4680      	mov	r8, r0
 800485e:	4614      	mov	r4, r2
 8004860:	460e      	mov	r6, r1
 8004862:	b921      	cbnz	r1, 800486e <_realloc_r+0x16>
 8004864:	4611      	mov	r1, r2
 8004866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800486a:	f7ff bc37 	b.w	80040dc <_malloc_r>
 800486e:	b92a      	cbnz	r2, 800487c <_realloc_r+0x24>
 8004870:	f7ff fbcc 	bl	800400c <_free_r>
 8004874:	4625      	mov	r5, r4
 8004876:	4628      	mov	r0, r5
 8004878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800487c:	f000 f81b 	bl	80048b6 <_malloc_usable_size_r>
 8004880:	4284      	cmp	r4, r0
 8004882:	4607      	mov	r7, r0
 8004884:	d802      	bhi.n	800488c <_realloc_r+0x34>
 8004886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800488a:	d812      	bhi.n	80048b2 <_realloc_r+0x5a>
 800488c:	4621      	mov	r1, r4
 800488e:	4640      	mov	r0, r8
 8004890:	f7ff fc24 	bl	80040dc <_malloc_r>
 8004894:	4605      	mov	r5, r0
 8004896:	2800      	cmp	r0, #0
 8004898:	d0ed      	beq.n	8004876 <_realloc_r+0x1e>
 800489a:	42bc      	cmp	r4, r7
 800489c:	4622      	mov	r2, r4
 800489e:	4631      	mov	r1, r6
 80048a0:	bf28      	it	cs
 80048a2:	463a      	movcs	r2, r7
 80048a4:	f7ff ffca 	bl	800483c <memcpy>
 80048a8:	4631      	mov	r1, r6
 80048aa:	4640      	mov	r0, r8
 80048ac:	f7ff fbae 	bl	800400c <_free_r>
 80048b0:	e7e1      	b.n	8004876 <_realloc_r+0x1e>
 80048b2:	4635      	mov	r5, r6
 80048b4:	e7df      	b.n	8004876 <_realloc_r+0x1e>

080048b6 <_malloc_usable_size_r>:
 80048b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ba:	1f18      	subs	r0, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bfbc      	itt	lt
 80048c0:	580b      	ldrlt	r3, [r1, r0]
 80048c2:	18c0      	addlt	r0, r0, r3
 80048c4:	4770      	bx	lr
	...

080048c8 <_init>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr

080048d4 <_fini>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	bf00      	nop
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr
